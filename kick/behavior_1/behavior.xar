<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.ald.softbankrobotics.com/schema/choregraphe/project.xsd" xar_version="3">
  <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
    <bitmap>media/images/box/root.png</bitmap>
    <script language="4">
      <content>
        <![CDATA[]]>
      </content>
    </script>
    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
    <Timeline enable="0">
      <BehaviorLayer name="behavior_layer1">
        <BehaviorKeyframe name="keyframe1" index="1">
          <Diagram>
            <Box name="kick" id="1" localization="8" tooltip="" x="537" y="161">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import motion as mot
import math
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        self.motion = self.session().service("ALMotion")
        self.posture = self.session().service("ALRobotPosture")

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.kick_right_2()
        self.onStopped() #activate the output of the box


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def kick_right(self):
        names = list()
        times = list()
        keys = list()

        names.append("LHipYawPitch")
        times.append([ 2.60000, 5.20000])
        keys.append([ [ -0.00456, [ 3, -0.86667, 0.00000], [ 3, 0.86667, 0.00000]], [ 0.01538, [ 3, -0.86667, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LHipRoll")
        times.append([ 2.60000, 5.20000])
        keys.append([ [ -0.11202, [ 3, -0.86667, 0.00000], [ 3, 0.86667, 0.00000]], [ -0.11202, [ 3, -0.86667, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LHipPitch")
        times.append([ 2.60000, 5.20000])
        keys.append([ [ -0.20253, [ 3, -0.86667, 0.00000], [ 3, 0.86667, 0.00000]], [ -0.20406, [ 3, -0.86667, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LKneePitch")
        times.append([ 2.60000, 5.20000])
        keys.append([ [ 0.83761, [ 3, -0.86667, 0.00000], [ 3, 0.86667, 0.00000]], [ 0.84528, [ 3, -0.86667, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LAnklePitch")
        times.append([ 2.60000, 5.20000])
        keys.append([ [ -0.45862, [ 3, -0.86667, 0.00000], [ 3, 0.86667, 0.00000]], [ -0.46016, [ 3, -0.86667, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LAnkleRoll")
        times.append([ 2.60000, 5.20000])
        keys.append([ [ 0.23466, [ 3, -0.86667, 0.00000], [ 3, 0.86667, 0.00000]], [ 0.23466, [ 3, -0.86667, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RHipRoll")
        times.append([ 2.60000, 5.20000])
        keys.append([ [ -0.13810, [ 3, -0.86667, 0.00000], [ 3, 0.86667, 0.00000]], [ -0.13964, [ 3, -0.86667, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RHipPitch")
        times.append([ 2.60000, 5.00000, 5.20000])
        keys.append([ [ -0.28528, [ 3, -0.86667, 0.00000], [ 3, 0.80000, 0.00000]], [ -0.56549, [ 3, -0.80000, 0.10950], [ 3, 0.06667, -0.00913]], [ -0.64117, [ 3, -0.06667, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RKneePitch")
        times.append([ 2.60000, 5.00000, 5.20000])
        keys.append([ [ 1.02007, [ 3, -0.86667, 0.00000], [ 3, 0.80000, 0.00000]], [ 1.91812, [ 3, -0.80000, 0.00000], [ 3, 0.06667, 0.00000]], [ 0.97558, [ 3, -0.06667, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RAnklePitch")
        times.append([ 2.60000, 5.00000, 5.20000])
        keys.append([ [ -0.69955, [ 3, -0.86667, 0.00000], [ 3, 0.80000, 0.00000]], [ -0.46251, [ 3, -0.80000, -0.17606], [ 3, 0.06667, 0.01467]], [ -0.12736, [ 3, -0.06667, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RAnkleRoll")
        times.append([ 2.60000, 5.20000])
        keys.append([ [ -0.00311, [ 3, -0.86667, 0.00000], [ 3, 0.86667, 0.00000]], [ -0.00311, [ 3, -0.86667, 0.00000], [ 3, 0.00000, 0.00000]]])

        self.motion.angleInterpolationBezier(names, times, keys);



    def kick_right_2(self):
        isEnabled  = True
        self.motion.wbEnable(isEnabled)

        # Legs are constrained fixed
        stateName  = "Fixed"
        supportLeg = "Legs"
        self.motion.wbFootState(stateName, supportLeg)

        # Constraint Balance Motion
        isEnable   = True
        supportLeg = "Legs"
        self.motion.wbEnableBalanceConstraint(isEnable, supportLeg)

        # Com go to LLeg
        supportLeg = "LLeg"
        duration   = 1.0
        self.motion.wbGoToBalance(supportLeg, duration)

        # RLeg is free
        stateName  = "Free"
        supportLeg = "RLeg"
        self.motion.wbFootState(stateName, supportLeg)

        # RLeg is optimized
        effectorName = "RLeg"
        axisMask     = 63
        space        = mot.FRAME_TORSO


        # Motion of the RLeg
        dx      = 0.025                 # translation axis X (meters)
        dz      = 0.02                 # translation axis Z (meters)
        dwy     = 5.0*math.pi/180.0    # rotation axis Y (radian)


        times   = [1.0, 1.4, 2.1]
        isAbsolute = False

        targetList = [
        [-0.7*dx, 0.0, 1.1*dz, 0.0, +dwy, 0.0],
        [+2.2*dx, +dx, dz, 0.0, -dwy, 0.0],
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]

        self.motion.positionInterpolation(effectorName, space, targetList,
                                 axisMask, times, isAbsolute)


        # Example showing how to Enable Effector Control as an Optimization
        isActive     = False
        self.motion.wbEnableEffectorOptimization(effectorName, isActive)

        time.sleep(1.0)

        # Deactivate Head tracking
        isEnabled    = False
        self.motion.wbEnable(isEnabled)

        # send robot to Pose Init
        self.posture.goToPosture("StandInit", 0.5)

    def pickUpBall(self):

        names = list()
        times = list()
        keys = list()

        names.append("HeadPitch")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[0.0183661, [3, -1, 0], [3, 0.8, 0]], [-0.621311, [3, -0.8, 0], [3, 0.64, 0]], [-0.589098, [3, -0.64, 0], [3, 0.733333, 0]], [-0.664264, [3, -0.733333, 0], [3, 0.0533333, 0]], [-0.615176, [3, -0.0533333, -0.000876629], [3, 0.466667, 0.0076705]], [-0.607505, [3, -0.466667, 0], [3, 0.72, 0]], [-0.653526, [3, -0.72, 0], [3, 0.0266667, 0]], [-0.653526, [3, -0.0266667, 0], [3, 1.12, 0]], [-0.0383921, [3, -1.12, -0.046256], [3, 0.52, 0.021476]], [-0.016916, [3, -0.52, 0], [3, 0, 0]]])

        names.append("HeadYaw")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[0.00916195, [3, -1, 0], [3, 0.8, 0]], [0.0137641, [3, -0.8, -6.50186e-09], [3, 0.64, 5.20149e-09]], [0.0137641, [3, -0.64, -5.20149e-09], [3, 0.733333, 5.96004e-09]], [0.0214341, [3, -0.733333, 0], [3, 0.0533333, 0]], [0.0214341, [3, -0.0533333, 0], [3, 0.466667, 0]], [0.0137641, [3, -0.466667, 0], [3, 0.72, 0]], [0.0137641, [3, -0.72, 0], [3, 0.0266667, 0]], [0.0137641, [3, -0.0266667, 0], [3, 1.12, 0]], [0.0214341, [3, -1.12, 0], [3, 0.52, 0]], [0.00916195, [3, -0.52, 0], [3, 0, 0]]])

        names.append("LAnklePitch")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[-1.18944, [3, -1, 0], [3, 0.8, 0]], [-0.745566, [3, -0.8, -0.136457], [3, 0.64, 0.109166]], [-0.452572, [3, -0.64, -0.00133875], [3, 0.733333, 0.00153398]], [-0.451038, [3, -0.733333, -0.00153398], [3, 0.0533333, 0.000111562]], [-0.4403, [3, -0.0533333, 0], [3, 0.466667, 0]], [-0.563021, [3, -0.466667, 0.0446411], [3, 0.72, -0.0688749]], [-0.780848, [3, -0.72, 0], [3, 0.0266667, 0]], [-0.780848, [3, -0.0266667, 0], [3, 1.12, 0]], [-0.357464, [3, -1.12, -0.00991231], [3, 0.52, 0.00460214]], [-0.352862, [3, -0.52, 0], [3, 0, 0]]])

        names.append("LAnkleRoll")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[0.023052, [3, -1, 0], [3, 0.8, 0]], [-0.0260359, [3, -0.8, 0], [3, 0.64, 0]], [0.16418, [3, -0.64, 0], [3, 0.733333, 0]], [0.153442, [3, -0.733333, 0], [3, 0.0533333, 0]], [0.153442, [3, -0.0533333, 0], [3, 0.466667, 0]], [0.158044, [3, -0.466667, 0], [3, 0.72, 0]], [0.158044, [3, -0.72, 0], [3, 0.0266667, 0]], [0.158044, [3, -0.0266667, 0], [3, 1.12, 0]], [0.0061779, [3, -1.12, 0.0099119], [3, 0.52, -0.00460196]], [0.00157595, [3, -0.52, 0], [3, 0, 0]]])

        names.append("LElbowRoll")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[-0.987855, [3, -1, 0], [3, 0.8, 0]], [-0.300622, [3, -0.8, 0], [3, 0.64, 0]], [-0.309826, [3, -0.64, 0], [3, 0.733333, 0]], [-0.053648, [3, -0.733333, -0.0834167], [3, 0.0533333, 0.00606667]], [-0.0413761, [3, -0.0533333, 0], [3, 0.466667, 0]], [-0.338973, [3, -0.466667, 0.00298194], [3, 0.72, -0.00460071]], [-0.343573, [3, -0.72, 0], [3, 0.0266667, 0]], [-0.343573, [3, -0.0266667, 0], [3, 1.12, 0]], [-0.108872, [3, -1.12, 0], [3, 0.52, 0]], [-0.417486, [3, -0.52, 0], [3, 0, 0]]])

        names.append("LElbowYaw")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[-1.37144, [3, -1, 0], [3, 0.8, 0]], [0.159494, [3, -0.8, 0], [3, 0.64, 0]], [0.159494, [3, -0.64, 0], [3, 0.733333, 0]], [0.191708, [3, -0.733333, 0], [3, 0.0533333, 0]], [0.184038, [3, -0.0533333, 0.000786665], [3, 0.466667, -0.00688332]], [0.168698, [3, -0.466667, 0], [3, 0.72, 0]], [0.179436, [3, -0.72, 0], [3, 0.0266667, 0]], [0.179436, [3, -0.0266667, 0], [3, 1.12, 0]], [-1.18276, [3, -1.12, 0.0364746], [3, 0.52, -0.0169346]], [-1.19969, [3, -0.52, 0], [3, 0, 0]]])

        names.append("LHand")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[0.246, [3, -1, 0], [3, 0.8, 0]], [0, [3, -0.8, 0], [3, 0.64, 0]], [0.0164, [3, -0.64, -0.0164], [3, 0.733333, 0.0187916]], [0.2272, [3, -0.733333, -0.0385007], [3, 0.0533333, 0.00280005]], [0.23, [3, -0.0533333, 0], [3, 0.466667, 0]], [0.0196, [3, -0.466667, 0.00233333], [3, 0.72, -0.0036]], [0.016, [3, -0.72, 0], [3, 0.0266667, 0]], [0.0336, [3, -0.0266667, -0.00209923], [3, 1.12, 0.0881675]], [0.2868, [3, -1.12, -0.0264289], [3, 0.52, 0.0122705]], [0.299071, [3, -0.52, 0], [3, 0, 0]]])

        names.append("LHipPitch")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[-0.569072, [3, -1, 0], [3, 0.8, 0]], [-0.943368, [3, -0.8, 0.164479], [3, 0.64, -0.131583]], [-1.45726, [3, -0.64, 0], [3, 0.733333, 0]], [-1.45726, [3, -0.733333, 0], [3, 0.0533333, 0]], [-1.45726, [3, -0.0533333, 0], [3, 0.466667, 0]], [-1.15353, [3, -0.466667, -0.120048], [3, 0.72, 0.185218]], [-0.54146, [3, -0.72, 0], [3, 0.0266667, 0]], [-0.54146, [3, -0.0266667, 0], [3, 1.12, 0]], [-0.455556, [3, -1.12, -0.0165195], [3, 0.52, 0.00766977]], [-0.447886, [3, -0.52, 0], [3, 0, 0]]])

        names.append("LHipRoll")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[0.039926, [3, -1, 0], [3, 0.8, 0]], [-0.167164, [3, -0.8, 0.0553945], [3, 0.64, -0.0443156]], [-0.259204, [3, -0.64, 0.00401626], [3, 0.733333, -0.00460196]], [-0.263806, [3, -0.733333, 0], [3, 0.0533333, 0]], [-0.263806, [3, -0.0533333, 0], [3, 0.466667, 0]], [-0.197844, [3, -0.466667, -0.0277499], [3, 0.72, 0.0428141]], [-0.052114, [3, -0.72, 0], [3, 0.0266667, 0]], [-0.052114, [3, -0.0266667, 0], [3, 1.12, 0]], [0.0061779, [3, -1.12, 0], [3, 0.52, 0]], [0.00310993, [3, -0.52, 0], [3, 0, 0]]])

        names.append("LHipYawPitch")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[-0.612024, [3, -1, 0], [3, 0.8, 0]], [-0.993989, [3, -0.8, 0.0948807], [3, 0.64, -0.0759046]], [-1.12438, [3, -0.64, 0.0120488], [3, 0.733333, -0.013806]], [-1.13819, [3, -0.733333, 0], [3, 0.0533333, 0]], [-1.13819, [3, -0.0533333, 0], [3, 0.466667, 0]], [-1.13665, [3, -0.466667, -0.00153345], [3, 0.72, 0.00236589]], [-1.12591, [3, -0.72, 0], [3, 0.0266667, 0]], [-1.12591, [3, -0.0266667, 0], [3, 1.12, 0]], [-0.00609398, [3, -1.12, 0], [3, 0.52, 0]], [-0.00762796, [3, -0.52, 0], [3, 0, 0]]])

        names.append("LKneePitch")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[2.10461, [3, -1, 0], [3, 0.8, 0]], [2.03711, [3, -0.8, 0], [3, 0.64, 0]], [2.11255, [3, -0.64, 0], [3, 0.733333, 0]], [2.10921, [3, -0.733333, 0], [3, 0.0533333, 0]], [2.10921, [3, -0.0533333, 0], [3, 0.466667, 0]], [2.11255, [3, -0.466667, 0], [3, 0.72, 0]], [2.00029, [3, -0.72, 0], [3, 0.0266667, 0]], [2.00029, [3, -0.0266667, 0], [3, 1.12, 0]], [0.699462, [3, -1.12, 0], [3, 0.52, 0]], [0.70253, [3, -0.52, 0], [3, 0, 0]]])

        names.append("LShoulderPitch")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[1.42504, [3, -1, 0], [3, 0.8, 0]], [0.544529, [3, -0.8, 0], [3, 0.64, 0]], [0.54913, [3, -0.64, -0.00460121], [3, 0.733333, 0.00527222]], [0.605888, [3, -0.733333, 0], [3, 0.0533333, 0]], [0.605888, [3, -0.0533333, 0], [3, 0.466667, 0]], [0.470897, [3, -0.466667, 0.00298306], [3, 0.72, -0.00460244]], [0.466294, [3, -0.72, 0], [3, 0.0266667, 0]], [0.466294, [3, -0.0266667, 0], [3, 1.12, 0]], [1.55697, [3, -1.12, 0], [3, 0.52, 0]], [1.46334, [3, -0.52, 0], [3, 0, 0]]])

        names.append("LShoulderRoll")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[0.288349, [3, -1, 0], [3, 0.8, 0]], [-0.15651, [3, -0.8, 0], [3, 0.64, 0]], [-0.00771189, [3, -0.64, 0], [3, 0.733333, 0]], [-0.2869, [3, -0.733333, 0], [3, 0.0533333, 0]], [-0.250084, [3, -0.0533333, -0.00886312], [3, 0.466667, 0.0775523]], [-0.0276539, [3, -0.466667, 0], [3, 0.72, 0]], [-0.0506639, [3, -0.72, 0], [3, 0.0266667, 0]], [-0.0506639, [3, -0.0266667, 0], [3, 1.12, 0]], [0.283748, [3, -1.12, 0], [3, 0.52, 0]], [0.176053, [3, -0.52, 0], [3, 0, 0]]])

        names.append("LWristYaw")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[-0.00771189, [3, -1, 0], [3, 0.8, 0]], [-1.62301, [3, -0.8, 0], [3, 0.64, 0]], [-1.54018, [3, -0.64, 0], [3, 0.733333, 0]], [-1.65369, [3, -0.733333, 0], [3, 0.0533333, 0]], [-1.63835, [3, -0.0533333, 0], [3, 0.466667, 0]], [-1.79176, [3, -0.466667, 0], [3, 0.72, 0]], [-1.76107, [3, -0.72, 0], [3, 0.0266667, 0]], [-1.76107, [3, -0.0266667, 0], [3, 1.12, 0]], [-0.22554, [3, -1.12, -0.422851], [3, 0.52, 0.196324]], [0.0964535, [3, -0.52, 0], [3, 0, 0]]])

        names.append("RAnklePitch")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[-1.18421, [3, -1, 0], [3, 0.8, 0]], [-0.719404, [3, -0.8, -0.125561], [3, 0.64, 0.100449]], [-0.506178, [3, -0.64, 0], [3, 0.733333, 0]], [-0.515382, [3, -0.733333, 0], [3, 0.0533333, 0]], [-0.515382, [3, -0.0533333, 0], [3, 0.466667, 0]], [-0.615092, [3, -0.466667, 0.0412226], [3, 0.72, -0.0636006]], [-0.829852, [3, -0.72, 0], [3, 0.0266667, 0]], [-0.829852, [3, -0.0266667, 0], [3, 1.12, 0]], [-0.355846, [3, -1.12, 0], [3, 0.52, 0]], [-0.360449, [3, -0.52, 0], [3, 0, 0]]])

        names.append("RAnkleRoll")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[0.046062, [3, -1, 0], [3, 0.8, 0]], [0.0445281, [3, -0.8, 0.00153397], [3, 0.64, -0.00122717]], [-0.118076, [3, -0.64, 0.0026775], [3, 0.733333, -0.00306797]], [-0.121144, [3, -0.733333, 0], [3, 0.0533333, 0]], [-0.121144, [3, -0.0533333, 0], [3, 0.466667, 0]], [-0.161028, [3, -0.466667, 0.00663584], [3, 0.72, -0.0102382]], [-0.171766, [3, -0.72, 0], [3, 0.0266667, 0]], [-0.171766, [3, -0.0266667, 0], [3, 1.12, 0]], [0.0123138, [3, -1.12, 0], [3, 0.52, 0]], [0.00771189, [3, -0.52, 0], [3, 0, 0]]])

        names.append("RElbowRoll")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[0.0349066, [3, -1, 0], [3, 0.8, 0]], [0.297638, [3, -0.8, -0.083311], [3, 0.64, 0.0666488]], [0.484786, [3, -0.64, 0], [3, 0.733333, 0]], [0.19486, [3, -0.733333, 0], [3, 0.0533333, 0]], [0.19486, [3, -0.0533333, 0], [3, 0.466667, 0]], [0.200996, [3, -0.466667, -0.00361954], [3, 0.72, 0.00558443]], [0.222472, [3, -0.72, 0], [3, 0.0266667, 0]], [0.222472, [3, -0.0266667, 0], [3, 1.12, 0]], [0.04913, [3, -1.12, 0.0107405], [3, 0.52, -0.00498668]], [0.0441433, [3, -0.52, 0], [3, 0, 0]]])

        names.append("RElbowYaw")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[1.36522, [3, -1, 0], [3, 0.8, 0]], [0.469363, [3, -0.8, 0.0230109], [3, 0.64, -0.0184087]], [0.450954, [3, -0.64, 0.0184087], [3, 0.733333, -0.0210933]], [-0.0583339, [3, -0.733333, 0], [3, 0.0533333, 0]], [-0.0583339, [3, -0.0533333, 0], [3, 0.466667, 0]], [-0.0874801, [3, -0.466667, 0.00522824], [3, 0.72, -0.00806643]], [-0.0982179, [3, -0.72, 0], [3, 0.0266667, 0]], [-0.0982179, [3, -0.0266667, 0], [3, 1.12, 0]], [1.24863, [3, -1.12, 0], [3, 0.52, 0]], [1.18682, [3, -0.52, 0], [3, 0, 0]]])

        names.append("RHand")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[0.16, [3, -1, 0], [3, 0.8, 0]], [0.9668, [3, -0.8, 0], [3, 0.64, 0]], [0.954, [3, -0.64, 0.0128], [3, 0.733333, -0.0146666]], [0.5712, [3, -0.733333, 0.241503], [3, 0.0533333, -0.0175638]], [0.1768, [3, -0.0533333, 0.00192], [3, 0.466667, -0.0168]], [0.16, [3, -0.466667, 0.00613483], [3, 0.72, -0.00946517]], [0.13, [3, -0.72, 0], [3, 0.0266667, 0]], [0.17, [3, -0.0266667, -0.000542636], [3, 1.12, 0.0227907]], [0.2, [3, -1.12, -0.0113821], [3, 0.52, 0.00528455]], [0.21, [3, -0.52, 0], [3, 0, 0]]])

        names.append("RHipPitch")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[-0.589097, [3, -1, 0], [3, 0.8, 0]], [-1.24105, [3, -0.8, 0.0479379], [3, 0.64, -0.0383503]], [-1.2794, [3, -0.64, 0], [3, 0.733333, 0]], [-1.27786, [3, -0.733333, 0], [3, 0.0533333, 0]], [-1.27786, [3, -0.0533333, 0], [3, 0.466667, 0]], [-1.11373, [3, -0.466667, -0.0727932], [3, 0.72, 0.11231]], [-0.722556, [3, -0.72, 0], [3, 0.0266667, 0]], [-0.722556, [3, -0.0266667, 0], [3, 1.12, 0]], [-0.454106, [3, -1.12, -1.86421e-06], [3, 0.52, 8.65527e-07]], [-0.454105, [3, -0.52, 0], [3, 0, 0]]])

        names.append("RHipRoll")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[-0.240796, [3, -1, 0], [3, 0.8, 0]], [-0.0429101, [3, -0.8, -0.0906196], [3, 0.64, 0.0724957]], [0.24855, [3, -0.64, 0], [3, 0.733333, 0]], [0.24855, [3, -0.733333, 0], [3, 0.0533333, 0]], [0.24855, [3, -0.0533333, 0], [3, 0.466667, 0]], [0.14884, [3, -0.466667, 0.037402], [3, 0.72, -0.057706]], [-0.0367741, [3, -0.72, 0], [3, 0.0266667, 0]], [-0.0367741, [3, -0.0266667, 0], [3, 1.12, 0]], [-0.00916195, [3, -1.12, -0.00768249], [3, 0.52, 0.00356687]], [-0.00302602, [3, -0.52, 0], [3, 0, 0]]])

        names.append("RHipYawPitch")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[-0.612024, [3, -1, 0], [3, 0.8, 0]], [-0.993989, [3, -0.8, 0.0948807], [3, 0.64, -0.0759046]], [-1.12438, [3, -0.64, 0.0120488], [3, 0.733333, -0.013806]], [-1.13819, [3, -0.733333, 0], [3, 0.0533333, 0]], [-1.13819, [3, -0.0533333, 0], [3, 0.466667, 0]], [-1.13665, [3, -0.466667, -0.00153345], [3, 0.72, 0.00236589]], [-1.12591, [3, -0.72, 0], [3, 0.0266667, 0]], [-1.12591, [3, -0.0266667, 0], [3, 1.12, 0]], [-0.00609398, [3, -1.12, 0], [3, 0.52, 0]], [-0.00762796, [3, -0.52, 0], [3, 0, 0]]])

        names.append("RKneePitch")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[2.11255, [3, -1, 0], [3, 0.8, 0]], [2.10623, [3, -0.8, 0.00259118], [3, 0.64, -0.00207295]], [2.09855, [3, -0.64, 0], [3, 0.733333, 0]], [2.11236, [3, -0.733333, 0], [3, 0.0533333, 0]], [2.11236, [3, -0.0533333, 0], [3, 0.466667, 0]], [2.10316, [3, -0.466667, 0], [3, 0.72, 0]], [2.10316, [3, -0.72, 0], [3, 0.0266667, 0]], [2.10316, [3, -0.0266667, 0], [3, 1.12, 0]], [0.688808, [3, -1.12, 0], [3, 0.52, 0]], [0.690342, [3, -0.52, 0], [3, 0, 0]]])

        names.append("RShoulderPitch")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[1.42206, [3, -1, 0], [3, 0.8, 0]], [0.710284, [3, -0.8, 0], [3, 0.64, 0]], [0.721022, [3, -0.64, 0], [3, 0.733333, 0]], [0.590632, [3, -0.733333, 0], [3, 0.0533333, 0]], [0.590632, [3, -0.0533333, 0], [3, 0.466667, 0]], [0.526205, [3, -0.466667, 0], [3, 0.72, 0]], [0.544613, [3, -0.72, 0], [3, 0.0266667, 0]], [0.544613, [3, -0.0266667, 0], [3, 1.12, 0]], [1.03089, [3, -1.12, -0.248748], [3, 0.52, 0.11549]], [1.63733, [3, -0.52, 0], [3, 0, 0]]])

        names.append("RShoulderRoll")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[-0.276162, [3, -1, 0], [3, 0.8, 0]], [-0.128898, [3, -0.8, -0.0596555], [3, 0.64, 0.0477244]], [0.0459781, [3, -0.64, -0.0629089], [3, 0.733333, 0.0720831]], [0.276078, [3, -0.733333, 0], [3, 0.0533333, 0]], [0.276078, [3, -0.0533333, 0], [3, 0.466667, 0]], [0.185572, [3, -0.466667, 0], [3, 0.72, 0]], [0.210117, [3, -0.72, 0], [3, 0.0266667, 0]], [0.210117, [3, -0.0266667, 0], [3, 1.12, 0]], [-0.250084, [3, -1.12, 0.010661], [3, 0.52, -0.00494975]], [-0.255034, [3, -0.52, 0], [3, 0, 0]]])

        names.append("RWristYaw")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[-0.0138481, [3, -1, 0], [3, 0.8, 0]], [1.33454, [3, -0.8, -0.011505], [3, 0.64, 0.00920402]], [1.34374, [3, -0.64, -0.00920402], [3, 0.733333, 0.0105463]], [1.72571, [3, -0.733333, 0], [3, 0.0533333, 0]], [1.72571, [3, -0.0533333, 0], [3, 0.466667, 0]], [1.73491, [3, -0.466667, -0.00542962], [3, 0.72, 0.00837713]], [1.76713, [3, -0.72, 0], [3, 0.0266667, 0]], [1.76713, [3, -0.0266667, 0], [3, 1.12, 0]], [0.133416, [3, -1.12, 0.0747885], [3, 0.52, -0.0347232]], [0.0986927, [3, -0.52, 0], [3, 0, 0]]])

        self.motion.angleInterpolationBezier(names, times, keys)]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
            </Box>
            <Box name="Stand Up" id="2" localization="8" tooltip="the robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="480" y="361">
              <bitmap>media/images/box/movement/stand.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" />
              <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
              <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" />
              <Timeline enable="0">
                <BehaviorLayer name="StandUpBehavior">
                  <BehaviorKeyframe name="DetectRobotPose" index="1">
                    <Diagram>
                      <Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="331" y="92">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureService.setMaxTryNumber(self.nTries)

        result = self.postureService.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                        <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                          <Choice value="Crouch" />
                          <Choice value="LyingBack" />
                          <Choice value="LyingBelly" />
                          <Choice value="Sit" />
                          <Choice value="SitRelax" />
                          <Choice value="StandInit" />
                          <Choice value="Stand" />
                          <Choice value="StandZero" />
                        </Parameter>
                        <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                        <Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                        <Resource name="All motors" type="Lock" timeout="0" />
                        <Resource name="Stiffness" type="Lock" timeout="0" />
                      </Box>
                      <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                      <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
              <Resource name="All motors" type="Lock" timeout="0" />
            </Box>
            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
            <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="3" />
          </Diagram>
        </BehaviorKeyframe>
      </BehaviorLayer>
    </Timeline>
  </Box>
</ChoregrapheProject>
