<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.ald.softbankrobotics.com/schema/choregraphe/project.xsd" xar_version="3">
  <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
    <bitmap>media/images/box/root.png</bitmap>
    <script language="4">
      <content>
        <![CDATA[]]>
      </content>
    </script>
    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
    <Timeline enable="0">
      <BehaviorLayer name="behavior_layer1">
        <BehaviorKeyframe name="keyframe1" index="1">
          <Diagram scale="118.921">
            <Box name="Red Ball Tracker" id="9" localization="-1" tooltip="This box makes the robot track a red ball with different modes." x="353" y="259">
              <bitmap>media/images/box/tracker/tracker.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import time
import math

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.targetName = "RedBall"
        self.distanceX = 0.0
        self.distanceY = 0.0
        self.angleWz = 0.0
        self.thresholdX = 0.0
        self.thresholdY = 0.0
        self.thresholdWz = 0.0
        self.subscribeDone = None
        self.effector = "None"
        self.isRunning = False
        self.distance = 0.0
        self.timeMillisOld = 0

    def onLoad(self):
        self.tracker = self.session().service( "ALTracker" )
        self.memory = self.session().service("ALMemory")
        self.motion = self.session().service("ALMotion")
        self.redBallDetection = self.session().service("ALRedBallDetection")
        self.BIND_PYTHON(self.getName(), "setParameter")
        self.BIND_PYTHON(self.getName(), "onTargetReached")

    def onUnload(self):
        if self.subscribeDone:
            self.memory.unsubscribeToEvent("ALTracker/TargetReached", self.getName())
            self.subscribeDone = False

        if self.isRunning:
            self.tracker.setEffector("None")
            #self.tracker.stopTracker()
            self.tracker.unregisterTarget(self.targetName)
            self.isRunning = False

    def getTimeBallData(self):
        ###
        # Summary: this method will indicate if we have information in that moment about the
        #            ball
        # Parameters: self
        # Return: data in case we have information or 0 in case we don t have
        ###
        # load data from reBallDetected into data
        data = self.memory.getData("redBallDetected", 0)
        # if there is data
        if (data):
            # return data
            return data[0]
        else:
            return 0

    def isNewBall(self):
        ###
        # Summary: indicate if Nao found the ball again after missing it
        # Parameters: self
        # Return: false if there is no data or it is old ball and true if it is new ball
        ###
        # get moment of last time Nao got data of the ball
        data = self.getTimeBallData()
        # if there is no data
        if (data == 0):
            return False

        # get moment of last time Nao got data of the ball
        timeMillis = self.getTimeBallData()[1]
        # write it on logger
        self.logger.info("Time for last ball: " + str(timeMillis))

        # if data is not null
        if (data):
            if (timeMillis <= self.timeMillisOld):
                # change value of old time Nao saw the ball for new moment
                self.timeMillisOld = timeMillis
                # write into logger
                self.logger.info("Old Ball!")
                return False
            else:
                # change value of old time Nao saw the ball for new moment
                self.timeMillisOld = timeMillis
                self.logger.info("New Ball!")
                return True
        else:
            return False

    def onInput_onStart(self):
        self.memory.subscribeToEvent("ALTracker/TargetReached", self.getName(), "onTargetReached")
        self.subscribeDone = True

        mode = self.getParameter("Mode")
        diameter = self.getParameter("Diameter (m)")
        self.distanceX = self.getParameter("Distance X (m)")
        self.thresholdX = self.getParameter("Threshold X (m)")
        self.distanceY = self.getParameter("Distance Y (m)")
        self.thresholdY = self.getParameter("Threshold Y (m)")
        self.angleWz = self.getParameter("Theta (rad)")
        self.thresholdWz = self.getParameter("Threshold Theta (rad)")
        self.effector = self.getParameter("Effector")

        self.tracker.setEffector(self.effector)

        self.tracker.registerTarget(self.targetName, diameter)
        self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                           self.thresholdX, self.thresholdY, self.thresholdWz])
        self.tracker.setMode(mode)
        self.isRunning = True
        self.distanceToTarget = math.sqrt(math.pow(self.distanceX,2)+math.pow(self.distanceY,2))

        ballLost = 0
        atBall = False
        self.tracker.track(self.targetName)
        startTime = time.time() * 1000
        self.logger.info("Start tracking: " + str(startTime))
        reached_or_lost = ""

        while(atBall==False):
            #if not self.isRunning:
            #    self.tracker.stopTracker()

            time.sleep(0.1)

            ###### TODO
            x = 0
            y = 0
            if self.tracker.getTargetPosition():
                x = self.tracker.getTargetPosition()[0]
                y = self.tracker.getTargetPosition()[1]
                self.distance = math.sqrt(math.pow(x,2)+math.pow(y,2))
                #angle = math.atan2(y, x)
                #angleRounded = int(angle/(5.0*motion.TO_RAD))*(5.0*motion.TO_RAD)
                #The walking velocity angle must be between -1 and 1
                #if(angleRounded>1):
                #    angleRounded = 1
                #if(angleRounded<-1):
                #    angleRounded = -1
                self.logger.info("Ball at: x=" + str(x) + ", y=" + str(y)) # + " with " + str(angleRounded) + " in " + str(self.distance))


            if(self.isNewBall() == False):
                ballLost = ballLost + 1
                self.logger.info("Ball lost?")
            else:
                ballLost = 0
                self.logger.info("####### New Ball is found #######")

            #If we lost sight of the ball a certain amount
            if(ballLost >= 5):
                self.logger.info("####### ball is LOST  #######")
                atBall = True
                #self.motion.stopMove()
                #self.tracker.stopTracker()
                reached_or_lost = "lost"

            #If we reached our target distance
            if(self.distanceToTarget-0.015 <= self.distance <= self.distanceToTarget+0.015):
                self.logger.info("At my Target")
                atBall = True
                #self.motion.stopMove()
                reached_or_lost = "reached"

#            if(self.distance > 0.2 and atBall == True):
#                atBall = False
#                self.tracker.stopTracker()
#                self.tracker.track(self.targetName)

        self.tracker.stopTracker()
        self.logger.info("End of function; " + reached_or_lost)
        self.stopRedBallTracker()
        endTime = time.time() * 1000
        self.logger.info("Stop tracking: " + str(endTime))
        diffTime = endTime - startTime
        self.logger.info("Runtime of Tracker in ms: " + str(diffTime))

    def stopRedBallTracker(self):
        self.logger.info("stopRedBallTracker")
        self.onUnload()
        self.onStopped()

    def setParameter(self, parameterName, newValue):
        GeneratedClass.setParameter(self, parameterName, newValue)
        if (parameterName == 'Mode'):
            self.tracker.setMode(newValue)
            return

        if (parameterName == "Diameter (m)"):
            self.tracker.registerTarget(self.targetName, newValue)
            return

        if (parameterName == "Distance X (m)"):
            self.distanceX = newValue
            self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                               self.thresholdX, self.thresholdY, self.thresholdWz])
            return

        if (parameterName == "Distance Y (m)"):
            self.distanceY = newValue
            self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                               self.thresholdX, self.thresholdY, self.thresholdWz])
            return

        if (parameterName == "Theta (rad)"):
            self.angleWz = newValue
            self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                               self.thresholdX, self.thresholdY, self.thresholdWz])
            return

        if (parameterName == "Threshold X (m)"):
            self.thresholdX = newValue
            self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                               self.thresholdX, self.thresholdY, self.thresholdWz])
            return

        if (parameterName == "Threshold Y (m)"):
            self.thresholdY = newValue
            self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                               self.thresholdX, self.thresholdY, self.thresholdWz])
            return

        if (parameterName == "Threshold Theta (rad)"):
            self.thresholdWz = newValue
            self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                               self.thresholdX, self.thresholdY, self.thresholdWz])
            return

        if(parameterName == "Effector"):
            self.tracker.setEffector(newValue)
            self.effector = newValue
            return

    def onTargetReached(self, key, value, message):
        self.targetReached()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
              <Parameter name="Mode" inherits_from_parent="0" content_type="3" value="Move" default_value="Head" custom_choice="0" tooltip="Set tracker mode" id="4">
                <Choice value="Head" />
                <Choice value="WholeBody" />
                <Choice value="Move" />
              </Parameter>
              <Parameter name="Effector" inherits_from_parent="0" content_type="3" value="None" default_value="None" custom_choice="0" tooltip="Set effector to use for tracking. Head is always used." id="5">
                <Choice value="None" />
                <Choice value="Arms" />
                <Choice value="LArm" />
                <Choice value="RArm" />
              </Parameter>
              <Parameter name="Diameter (m)" inherits_from_parent="0" content_type="2" value="0.05" default_value="0.06" min="0.01" max="1" tooltip="Diameter of the ball in meters." id="6" />
              <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.3" min="0.01" max="5" tooltip="Distance on X axis the robot will try to maintain from its target in move modes." id="7" />
              <Parameter name="Threshold X (m)" inherits_from_parent="0" content_type="2" value="0.01" default_value="0.1" min="0.01" max="1" tooltip="Threshold above which the robot will move to track its target in move modes." id="8" />
              <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="Distance on X axis the robot will try to maintain from its target in move modes." id="9" />
              <Parameter name="Threshold Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.1" min="0" max="1" tooltip="Threshold above which the robot will move to track its target in move modes." id="10" />
              <Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-3.14" max="3.14" tooltip="Wz angle of the vector robot-target the robot will try to maintain in move modes." id="11" />
              <Parameter name="Threshold Theta (rad)" inherits_from_parent="0" content_type="2" value="0" default_value="0.3" min="0" max="3.14" tooltip="Threshold of the angle of the vector robot-target above which the robot will move to track its target in move modes." id="12" />
            </Box>
            <Box name="Select Camera" id="2" localization="8" tooltip="Change the currently used camera." x="178" y="23">
              <bitmap>media/images/box/interaction/look.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.cameraModule = self.session().service( "ALVideoDevice" )

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setActiveCamera( 0 )
        #self.setCameraParams()
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setActiveCamera( 1 )
        #self.setCameraParams()
        self.onReady()

    def setCameraParams(self):
        self.logger.info("Brightness " + str(self.cameraModule.getCameraParameter("Brightness", 0)))
        self.logger.info("Sharpness " + str(self.cameraModule.getCameraParameter("Sharpness", 24)))
        self.cameraModule.setCameraParameter("Brightness", 0, 0 )
        self.cameraModule.setCameraParameter("Sharpness", 24, 9 )
        self.logger.info("Brightness " + str(self.cameraModule.getCameraParameter("Brightness", 0)))
        self.logger.info("Sharpness " + str(self.cameraModule.getCameraParameter("Sharpness", 24)))]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
              <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
              <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
              <Resource name="Camera setting" type="Lock" timeout="0" />
            </Box>
            <Box name="Ball" id="3" localization="8" tooltip="Say some text. The text can be localized." x="506" y="262">
              <bitmap>media/images/box/interaction/say.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
              <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
              <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
              <Parameter name="Text" inherits_from_parent="0" content_type="5" value="ball" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
              <Resource name="Speech" type="Lock" timeout="0" />
            </Box>
            <Box name="Red Ball Tracker (2)" id="6" localization="-1" tooltip="This box makes the robot track a red ball with different modes." x="301" y="92">
              <bitmap>media/images/box/tracker/tracker.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import time
import math

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.targetName = "RedBall"
        self.distanceX = 0.0
        self.distanceY = 0.0
        self.angleWz = 0.0
        self.thresholdX = 0.0
        self.thresholdY = 0.0
        self.thresholdWz = 0.0
        self.subscribeDone = None
        self.effector = "None"
        self.isRunning = False
        self.distance = 0.0
        self.timeMillisOld = 0
        self.reached_or_lost = None

    def onLoad(self):
        self.tracker = self.session().service( "ALTracker" )
        self.memory = self.session().service("ALMemory")
        self.motion = self.session().service("ALMotion")
        self.redBallDetection = self.session().service("ALRedBallDetection")
        self.BIND_PYTHON(self.getName(), "setParameter")
        #self.BIND_PYTHON(self.getName(), "onTargetReached")

    def onUnload(self):
        #if self.subscribeDone:
            #self.memory.unsubscribeToEvent("ALTracker/TargetReached", self.getName())
            #self.subscribeDone = False

        if self.isRunning:
            self.tracker.setEffector("None")
            #self.tracker.stopTracker()
            self.tracker.unregisterTarget(self.targetName)
            self.isRunning = False

    def getTimeBallData(self):
        ###
        # Summary: this method will indicate if we have information in that moment about the
        #            ball
        # Parameters: self
        # Return: data in case we have information or 0 in case we don t have
        ###
        # load data from reBallDetected into data
        data = self.memory.getData("redBallDetected", 0)
        # if there is data
        if (data):
            # return data
            return data[0]
        else:
            return 0

    def isNewBall(self):
        ###
        # Summary: indicate if Nao found the ball again after missing it
        # Parameters: self
        # Return: false if there is no data or it is old ball and true if it is new ball
        ###
        # get moment of last time Nao got data of the ball
        data = self.getTimeBallData()
        # if there is no data
        if (data == 0):
            return False

        # get moment of last time Nao got data of the ball
        timeMillis = self.getTimeBallData()[1]
        # write it on logger
        self.logger.info("Time for last ball: " + str(timeMillis))

        # if data is not null
        if (data):
            if (timeMillis <= self.timeMillisOld):
                # change value of old time Nao saw the ball for new moment
                self.timeMillisOld = timeMillis
                # write into logger
                self.logger.info("Old Ball!")
                return False
            else:
                # change value of old time Nao saw the ball for new moment
                self.timeMillisOld = timeMillis
                self.logger.info("New Ball!")
                return True
        else:
            return False

    def onInput_onStart(self):
        #self.memory.subscribeToEvent("ALTracker/TargetReached", self.getName(), "onTargetReached")
        #self.subscribeDone = True

        mode = self.getParameter("Mode")
        diameter = self.getParameter("Diameter (m)")
        self.distanceX = self.getParameter("Distance X (m)")
        self.thresholdX = self.getParameter("Threshold X (m)")
        self.distanceY = self.getParameter("Distance Y (m)")
        self.thresholdY = self.getParameter("Threshold Y (m)")
        self.angleWz = self.getParameter("Theta (rad)")
        self.thresholdWz = self.getParameter("Threshold Theta (rad)")
        self.effector = self.getParameter("Effector")

        self.tracker.setEffector(self.effector)

        self.tracker.registerTarget(self.targetName, diameter)
        self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                           self.thresholdX, self.thresholdY, self.thresholdWz])
        self.tracker.setMode(mode)
        self.isRunning = True
        self.distanceToTarget = math.sqrt(math.pow(self.distanceX,2)+math.pow(self.distanceY,2))

        ballLost = 0
        atBall = False
        self.tracker.track(self.targetName)
        startTime = time.time() * 1000
        self.logger.info("Start tracking: " + str(startTime))

        while(atBall==False):
            #if not self.isRunning:
            #    self.tracker.stopTracker()

            time.sleep(0.1)

            ###### TODO
            x = 0
            y = 0
            if self.tracker.getTargetPosition():
                try:
                    x = self.tracker.getTargetPosition()[0]
                    y = self.tracker.getTargetPosition()[1]
                    self.distance = math.sqrt(math.pow(x,2)+math.pow(y,2))
                    #angle = math.atan2(y, x)
                    #angleRounded = int(angle/(5.0*motion.TO_RAD))*(5.0*motion.TO_RAD)
                    #The walking velocity angle must be between -1 and 1
                    #if(angleRounded>1):
                    #    angleRounded = 1
                    #if(angleRounded<-1):
                    #    angleRounded = -1
                    self.logger.info("Ball at: x=" + str(x) + ", y=" + str(y)) # + " with " + str(angleRounded) + " in " + str(self.distance))
                except IndexError:
                    self.logger.info("onInput_onStart IndexError: list index out of range")
                    #continue


            if(self.isNewBall() == False):
                ballLost = ballLost + 1
                self.logger.info("Ball lost?")
            else:
                ballLost = 0
                self.logger.info("####### New Ball is found #######")

            #If we lost sight of the ball a certain amount
            if(ballLost >= 5):
                self.logger.info("####### ball is LOST  #######")
                atBall = True
                #self.motion.stopMove()
                #self.tracker.stopTracker()
                self.reached_or_lost = "lost"

            #If we reached our target distance
            if(self.distanceToTarget-0.01 <= self.distance <= self.distanceToTarget+0.01):
                self.logger.info("At my Target")
                atBall = True
                #self.motion.stopMove()
                self.reached_or_lost = "reached"

#            if(self.distance > 0.2 and atBall == True):

#                atBall = False
#                self.tracker.stopTracker()
#                self.tracker.track(self.targetName)

        self.tracker.stopTracker()
        self.logger.info("End of function; " + self.reached_or_lost)
        self.stopRedBallTracker()
        endTime = time.time() * 1000
        self.logger.info("Stop tracking: " + str(endTime))
        diffTime = endTime - startTime
        self.logger.info("Runtime of Tracker in ms: " + str(diffTime))

    def stopRedBallTracker(self):
        self.logger.info("stopRedBallTracker")
        self.onUnload()
        if self.reached_or_lost == "lost":
            self.targetLost()
        else:
            self.targetReached()


    def setParameter(self, parameterName, newValue):
        GeneratedClass.setParameter(self, parameterName, newValue)
        if (parameterName == 'Mode'):
            self.tracker.setMode(newValue)
            return

        if (parameterName == "Diameter (m)"):
            self.tracker.registerTarget(self.targetName, newValue)
            return

        if (parameterName == "Distance X (m)"):
            self.distanceX = newValue
            self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                               self.thresholdX, self.thresholdY, self.thresholdWz])
            return

        if (parameterName == "Distance Y (m)"):
            self.distanceY = newValue
            self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                               self.thresholdX, self.thresholdY, self.thresholdWz])
            return

        if (parameterName == "Theta (rad)"):
            self.angleWz = newValue
            self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                               self.thresholdX, self.thresholdY, self.thresholdWz])
            return

        if (parameterName == "Threshold X (m)"):
            self.thresholdX = newValue
            self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                               self.thresholdX, self.thresholdY, self.thresholdWz])
            return

        if (parameterName == "Threshold Y (m)"):
            self.thresholdY = newValue
            self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                               self.thresholdX, self.thresholdY, self.thresholdWz])
            return

        if (parameterName == "Threshold Theta (rad)"):
            self.thresholdWz = newValue
            self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                               self.thresholdX, self.thresholdY, self.thresholdWz])
            return

        if(parameterName == "Effector"):
            self.tracker.setEffector(newValue)
            self.effector = newValue
            return

    #def onTargetReached(self, key, value, message):
    #    self.targetReached()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Output name="targetReached" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
              <Output name="targetLost" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
              <Parameter name="Mode" inherits_from_parent="0" content_type="3" value="Move" default_value="Head" custom_choice="0" tooltip="Set tracker mode" id="5">
                <Choice value="Head" />
                <Choice value="WholeBody" />
                <Choice value="Move" />
              </Parameter>
              <Parameter name="Effector" inherits_from_parent="0" content_type="3" value="None" default_value="None" custom_choice="0" tooltip="Set effector to use for tracking. Head is always used." id="6">
                <Choice value="None" />
                <Choice value="Arms" />
                <Choice value="LArm" />
                <Choice value="RArm" />
              </Parameter>
              <Parameter name="Diameter (m)" inherits_from_parent="0" content_type="2" value="0.05" default_value="0.06" min="0.01" max="1" tooltip="Diameter of the ball in meters." id="7" />
              <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.3" min="0.01" max="5" tooltip="Distance on X axis the robot will try to maintain from its target in move modes." id="8" />
              <Parameter name="Threshold X (m)" inherits_from_parent="0" content_type="2" value="0.01" default_value="0.1" min="0.01" max="1" tooltip="Threshold above which the robot will move to track its target in move modes." id="9" />
              <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="Distance on X axis the robot will try to maintain from its target in move modes." id="10" />
              <Parameter name="Threshold Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.1" min="0" max="1" tooltip="Threshold above which the robot will move to track its target in move modes." id="11" />
              <Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-3.14" max="3.14" tooltip="Wz angle of the vector robot-target the robot will try to maintain in move modes." id="12" />
              <Parameter name="Threshold Theta (rad)" inherits_from_parent="0" content_type="2" value="0" default_value="0.3" min="0" max="3.14" tooltip="Threshold of the angle of the vector robot-target above which the robot will move to track its target in move modes." id="13" />
            </Box>
            <Box name="Ball found" id="8" localization="8" tooltip="Say some text. The text can be localized." x="544" y="16">
              <bitmap>media/images/box/interaction/say.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
              <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="4" />
              <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="5" />
              <Parameter name="Text" inherits_from_parent="0" content_type="5" value="ball found" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="6" />
              <Resource name="Speech" type="Lock" timeout="0" />
            </Box>
            <Box name="Ball not found (1)" id="10" localization="8" tooltip="Say some text. The text can be localized." x="544" y="140">
              <bitmap>media/images/box/interaction/say.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="3" />
              <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="4" />
              <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="5" />
              <Parameter name="Text" inherits_from_parent="0" content_type="5" value="No ball" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="6" />
              <Resource name="Speech" type="Lock" timeout="0" />
            </Box>
            <Box name="Red Ball Tracker (1)" id="1" localization="-1" tooltip="This box makes the robot track a red ball with different modes." x="361" y="395">
              <bitmap>media/images/box/tracker/tracker.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import time
import math

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.targetName = "RedBall"
        self.distanceX = 0.0
        self.distanceY = 0.0
        self.angleWz = 0.0
        self.thresholdX = 0.0
        self.thresholdY = 0.0
        self.thresholdWz = 0.0
        self.subscribeDone = None
        self.effector = "None"
        self.isRunning = False
        self.distance = 0.0
        self.timeMillisOld = 0

    def onLoad(self):
        self.tracker = self.session().service( "ALTracker" )
        self.memory = self.session().service("ALMemory")
        self.memory.unsubscribeToEvent("ALTracker/TargetLost", self.getName())
        self.redBallDetection = self.session().service("ALRedBallDetection")
        self.BIND_PYTHON(self.getName(), "setParameter")
        self.BIND_PYTHON(self.getName(), "onTargetLost")
        self.BIND_PYTHON(self.getName(), "onTargetReached")
        self.BIND_PYTHON(self.getName(), "onTargetChanged")
        self.memory.subscribeToEvent("ALTracker/ActiveTargetChanged", self.getName(), "onTargetChanged")

    def onUnload(self):
        if self.subscribeDone:
            #self.memory.unsubscribeToEvent("ALTracker/TargetLost", self.getName())
            self.memory.unsubscribeToEvent("ALTracker/TargetReached", self.getName())
            self.subscribeDone = False

        if self.isRunning:
            self.tracker.setEffector("None")
            self.tracker.stopTracker()
            self.tracker.unregisterTarget(self.targetName)
            self.isRunning = False

    def getTimeBallData(self):
        ###
        # Summary: this method will indicate if we have information in that moment about the
        #            ball
        # Parameters: self
        # Return: data in case we have information or 0 in case we don t have
        ###
        # load data from reBallDetected into data
        data = self.memory.getData("redBallDetected", 0)
        # if there is data
        if (data):
            # return data
            return data[0]
        else:
            return 0

    def isNewBall(self):
        ###
        # Summary: indicate if Nao found the ball again after missing it
        # Parameters: self
        # Return: false if there is no data or it is old ball and true if it is new ball
        ###
        # get moment of last time Nao got data of the ball
        data = self.getTimeBallData()
        # if there is no data
        if (data == 0):
            return False

        # get moment of last time Nao got data of the ball
        timeMillis = self.getTimeBallData()[1]
        # write it on logger
        self.logger.info("Time for last ball: " + str(timeMillis))

        # if data is not null
        if (data):
            if (timeMillis <= self.timeMillisOld):
                # change value of old time Nao saw the ball for new moment
                self.timeMillisOld = timeMillis
                # write into logger
                self.logger.info("Old Ball!")
                return False
            else:
                # change value of old time Nao saw the ball for new moment
                self.timeMillisOld = timeMillis
                self.logger.info("New Ball!")
                return True
        else:
            return False

    def onInput_onStart(self):
        #self.memory.subscribeToEvent("ALTracker/TargetLost", self.getName(), "onTargetLost")
        self.memory.subscribeToEvent("ALTracker/TargetReached", self.getName(), "onTargetReached")
        self.subscribeDone = True

        mode = self.getParameter("Mode")
        diameter = self.getParameter("Diameter (m)")
        self.distanceX = self.getParameter("Distance X (m)")
        self.thresholdX = self.getParameter("Threshold X (m)")
        self.distanceY = self.getParameter("Distance Y (m)")
        self.thresholdY = self.getParameter("Threshold Y (m)")
        self.angleWz = self.getParameter("Theta (rad)")
        self.thresholdWz = self.getParameter("Threshold Theta (rad)")
        self.effector = self.getParameter("Effector")

        self.tracker.setEffector(self.effector)

        self.tracker.registerTarget(self.targetName, diameter)
        self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                           self.thresholdX, self.thresholdY, self.thresholdWz])
        self.tracker.setMode(mode)
        #self.logger.info("x="+str(self.distanceX))
        #self.logger.info(str(time.time()*1000) + str(self.tracker.getTargetPosition()))
        #self.logger.info(str(time.time()*1000) + "starting tracker")
        #self.tracker.track(self.targetName) #Start tracker for red ball
        #self.logger.info(str(time.time()*1000) + "stopping tracker")
        #position_red_ball_reached = self.tracker.getTargetPosition()
        #self.logger.info(str(time.time()*1000) + str(position_red_ball_reached))

        ballLost = 0
        atBall = False
        self.tracker.track(self.targetName)

        while(atBall==False):
            if(self.isRunning):
                self.tracker.stopTracker()
                self.end()
                self.targetReached()

            time.sleep(0.05)

            ###### TODO
            if self.tracker.getTargetPosition():
                x = self.tracker.getTargetPosition()[0]
                y = self.tracker.getTargetPosition()[1]
                #self.distance = math.sqrt(math.pow(x,2)+math.pow(y,2))
                #angle = math.atan2(y, x)
                #angleRounded = int(angle/(5.0*motion.TO_RAD))*(5.0*motion.TO_RAD)
                #The walking velocity angle must be between -1 and 1
                #if(angleRounded>1):
                #    angleRounded = 1
                #if(angleRounded<-1):
                #    angleRounded = -1
                self.logger.info("Ball at: x=" + str(x) + ", y=" + str(y)) # + " with " + str(angleRounded) + " in " + str(self.distance))


            if(self.isNewBall() == False):
                ballLost = ballLost + 1
                self.logger.info("Ball lost?")
            else:
                ballLost = 0
                self.logger.info("####### ballLost = 0 #######")

            self.logger.info("####### We are HERE #######")

            #If we lost sight of the ball a certain amount
            if(ballLost >= 10):
                self.logger.info("####### ball is LOST  #######")
                atBall = True
                self.tracker.stopTracker()
                self.targetLost()

        self.logger.info("####### We almost at the end #######")
        #self.isRunning = True
        #if position_red_ball_reached:
        self.targetReached()

    def onInput_onStop(self):
        self.logger.info("onInput_onStop")
        self.onStopped()
        self.onUnload()

    def setParameter(self, parameterName, newValue):
        GeneratedClass.setParameter(self, parameterName, newValue)
        if (parameterName == 'Mode'):
            self.tracker.setMode(newValue)
            return

        if (parameterName == "Diameter (m)"):
            self.tracker.registerTarget(self.targetName, newValue)
            return

        if (parameterName == "Distance X (m)"):
            self.distanceX = newValue
            self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                               self.thresholdX, self.thresholdY, self.thresholdWz])
            return

        if (parameterName == "Distance Y (m)"):
            self.distanceY = newValue
            self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                               self.thresholdX, self.thresholdY, self.thresholdWz])
            return

        if (parameterName == "Theta (rad)"):
            self.angleWz = newValue
            self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                               self.thresholdX, self.thresholdY, self.thresholdWz])
            return

        if (parameterName == "Threshold X (m)"):
            self.thresholdX = newValue
            self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                               self.thresholdX, self.thresholdY, self.thresholdWz])
            return

        if (parameterName == "Threshold Y (m)"):
            self.thresholdY = newValue
            self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                               self.thresholdX, self.thresholdY, self.thresholdWz])
            return

        if (parameterName == "Threshold Theta (rad)"):
            self.thresholdWz = newValue
            self.tracker.setRelativePosition([-self.distanceX, self.distanceY, self.angleWz,
                                               self.thresholdX, self.thresholdY, self.thresholdWz])
            return

        if(parameterName == "Effector"):
            self.tracker.setEffector(newValue)
            self.effector = newValue
            return

    def onTargetLost(self, key, value, message):
        self.targetLost()

    def onTargetReached(self, key, value, message):
        self.targetReached()

    def onTargetChanged(self, key, value, message):
        if value == self.targetName and not self.subscribeDone:
            #self.memory.subscribeToEvent("ALTracker/TargetLost", self.getName(), "onTargetLost")
            self.memory.subscribeToEvent("ALTracker/TargetReached", self.getName(), "onTargetReached")
            self.subscribeDone = True
        elif value != self.targetName and self.subscribeDone:
            #self.memory.unsubscribeToEvent("ALTracker/TargetLost", self.getName())
            self.memory.unsubscribeToEvent("ALTracker/TargetReached", self.getName())
            self.subscribeDone = False]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Output name="targetLost" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the target is lost." id="5" />
              <Output name="targetReached" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the target is reached." id="6" />
              <Parameter name="Mode" inherits_from_parent="0" content_type="3" value="Move" default_value="Head" custom_choice="0" tooltip="Set tracker mode" id="7">
                <Choice value="Head" />
                <Choice value="WholeBody" />
                <Choice value="Move" />
              </Parameter>
              <Parameter name="Effector" inherits_from_parent="0" content_type="3" value="None" default_value="None" custom_choice="0" tooltip="Set effector to use for tracking. Head is always used." id="8">
                <Choice value="None" />
                <Choice value="Arms" />
                <Choice value="LArm" />
                <Choice value="RArm" />
              </Parameter>
              <Parameter name="Diameter (m)" inherits_from_parent="0" content_type="2" value="0.05" default_value="0.06" min="0.01" max="1" tooltip="Diameter of the ball in meters." id="9" />
              <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.3" min="0.01" max="5" tooltip="Distance on X axis the robot will try to maintain from its target in move modes." id="10" />
              <Parameter name="Threshold X (m)" inherits_from_parent="0" content_type="2" value="0.01" default_value="0.1" min="0.01" max="1" tooltip="Threshold above which the robot will move to track its target in move modes." id="11" />
              <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="Distance on X axis the robot will try to maintain from its target in move modes." id="12" />
              <Parameter name="Threshold Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.1" min="0" max="1" tooltip="Threshold above which the robot will move to track its target in move modes." id="13" />
              <Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-3.14" max="3.14" tooltip="Wz angle of the vector robot-target the robot will try to maintain in move modes." id="14" />
              <Parameter name="Threshold Theta (rad)" inherits_from_parent="0" content_type="2" value="0" default_value="0.3" min="0" max="3.14" tooltip="Threshold of the angle of the vector robot-target above which the robot will move to track its target in move modes." id="15" />
            </Box>
            <Box name="Move To" id="4" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="110" y="367">
              <bitmap>media/images/box/movement/walk_forward.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        self.motion = self.session().service("ALMotion")

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos
            and abs(positionError.y) < self.positionErrorThresholdPos
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
              <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
              <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0.5" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
              <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
              <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
              <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Enables natural motion of the arms." id="9" />
              <Resource name="Legs" type="Lock" timeout="0" />
            </Box>
            <Link inputowner="3" indexofinput="2" outputowner="9" indexofoutput="3" />
            <Link inputowner="8" indexofinput="2" outputowner="6" indexofoutput="3" />
            <Link inputowner="10" indexofinput="2" outputowner="6" indexofoutput="4" />
            <Link inputowner="1" indexofinput="3" outputowner="1" indexofoutput="6" />
            <Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="2" />
            <Link inputowner="1" indexofinput="2" outputowner="1" indexofoutput="5" />
            <Link inputowner="0" indexofinput="4" outputowner="8" indexofoutput="3" />
            <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="3" />
            <Link inputowner="0" indexofinput="4" outputowner="3" indexofoutput="4" />
            <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" />
            <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" />
          </Diagram>
        </BehaviorKeyframe>
      </BehaviorLayer>
    </Timeline>
  </Box>
</ChoregrapheProject>
