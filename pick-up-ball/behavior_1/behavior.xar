<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.ald.softbankrobotics.com/schema/choregraphe/project.xsd" xar_version="3">
  <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
    <bitmap>media/images/box/root.png</bitmap>
    <script language="4">
      <content>
        <![CDATA[]]>
      </content>
    </script>
    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
    <Timeline enable="0">
      <BehaviorLayer name="behavior_layer1">
        <BehaviorKeyframe name="keyframe1" index="1">
          <Diagram>
            <Box name="Pick up ball" id="1" localization="8" tooltip="" x="505" y="40">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        self.motion = self.session().service("ALMotion")

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.pickUpBall2()
        self.onStopped() #activate the output of the box

    def pickUpBall(self):
        # https://github.com/azezezaaa/OAIAR_projetNAO/blob/main/nao.py
        names = list()
        times = list()
        keys = list()

        names.append("HeadPitch")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[0.0183661, [3, -1, 0], [3, 0.8, 0]], [-0.621311, [3, -0.8, 0], [3, 0.64, 0]], [-0.589098, [3, -0.64, 0], [3, 0.733333, 0]], [-0.664264, [3, -0.733333, 0], [3, 0.0533333, 0]], [-0.615176, [3, -0.0533333, -0.000876629], [3, 0.466667, 0.0076705]], [-0.607505, [3, -0.466667, 0], [3, 0.72, 0]], [-0.653526, [3, -0.72, 0], [3, 0.0266667, 0]], [-0.653526, [3, -0.0266667, 0], [3, 1.12, 0]], [-0.0383921, [3, -1.12, -0.046256], [3, 0.52, 0.021476]], [-0.016916, [3, -0.52, 0], [3, 0, 0]]])

        names.append("HeadYaw")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[0.00916195, [3, -1, 0], [3, 0.8, 0]], [0.0137641, [3, -0.8, -6.50186e-09], [3, 0.64, 5.20149e-09]], [0.0137641, [3, -0.64, -5.20149e-09], [3, 0.733333, 5.96004e-09]], [0.0214341, [3, -0.733333, 0], [3, 0.0533333, 0]], [0.0214341, [3, -0.0533333, 0], [3, 0.466667, 0]], [0.0137641, [3, -0.466667, 0], [3, 0.72, 0]], [0.0137641, [3, -0.72, 0], [3, 0.0266667, 0]], [0.0137641, [3, -0.0266667, 0], [3, 1.12, 0]], [0.0214341, [3, -1.12, 0], [3, 0.52, 0]], [0.00916195, [3, -0.52, 0], [3, 0, 0]]])

        names.append("LAnklePitch")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[-1.18944, [3, -1, 0], [3, 0.8, 0]], [-0.745566, [3, -0.8, -0.136457], [3, 0.64, 0.109166]], [-0.452572, [3, -0.64, -0.00133875], [3, 0.733333, 0.00153398]], [-0.451038, [3, -0.733333, -0.00153398], [3, 0.0533333, 0.000111562]], [-0.4403, [3, -0.0533333, 0], [3, 0.466667, 0]], [-0.563021, [3, -0.466667, 0.0446411], [3, 0.72, -0.0688749]], [-0.780848, [3, -0.72, 0], [3, 0.0266667, 0]], [-0.780848, [3, -0.0266667, 0], [3, 1.12, 0]], [-0.357464, [3, -1.12, -0.00991231], [3, 0.52, 0.00460214]], [-0.352862, [3, -0.52, 0], [3, 0, 0]]])

        names.append("LAnkleRoll")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[0.023052, [3, -1, 0], [3, 0.8, 0]], [-0.0260359, [3, -0.8, 0], [3, 0.64, 0]], [0.16418, [3, -0.64, 0], [3, 0.733333, 0]], [0.153442, [3, -0.733333, 0], [3, 0.0533333, 0]], [0.153442, [3, -0.0533333, 0], [3, 0.466667, 0]], [0.158044, [3, -0.466667, 0], [3, 0.72, 0]], [0.158044, [3, -0.72, 0], [3, 0.0266667, 0]], [0.158044, [3, -0.0266667, 0], [3, 1.12, 0]], [0.0061779, [3, -1.12, 0.0099119], [3, 0.52, -0.00460196]], [0.00157595, [3, -0.52, 0], [3, 0, 0]]])

        names.append("LElbowRoll")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[-0.987855, [3, -1, 0], [3, 0.8, 0]], [-0.300622, [3, -0.8, 0], [3, 0.64, 0]], [-0.309826, [3, -0.64, 0], [3, 0.733333, 0]], [-0.053648, [3, -0.733333, -0.0834167], [3, 0.0533333, 0.00606667]], [-0.0413761, [3, -0.0533333, 0], [3, 0.466667, 0]], [-0.338973, [3, -0.466667, 0.00298194], [3, 0.72, -0.00460071]], [-0.343573, [3, -0.72, 0], [3, 0.0266667, 0]], [-0.343573, [3, -0.0266667, 0], [3, 1.12, 0]], [-0.108872, [3, -1.12, 0], [3, 0.52, 0]], [-0.417486, [3, -0.52, 0], [3, 0, 0]]])

        names.append("LElbowYaw")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[-1.37144, [3, -1, 0], [3, 0.8, 0]], [0.159494, [3, -0.8, 0], [3, 0.64, 0]], [0.159494, [3, -0.64, 0], [3, 0.733333, 0]], [0.191708, [3, -0.733333, 0], [3, 0.0533333, 0]], [0.184038, [3, -0.0533333, 0.000786665], [3, 0.466667, -0.00688332]], [0.168698, [3, -0.466667, 0], [3, 0.72, 0]], [0.179436, [3, -0.72, 0], [3, 0.0266667, 0]], [0.179436, [3, -0.0266667, 0], [3, 1.12, 0]], [-1.18276, [3, -1.12, 0.0364746], [3, 0.52, -0.0169346]], [-1.19969, [3, -0.52, 0], [3, 0, 0]]])

        names.append("LHand")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[0.246, [3, -1, 0], [3, 0.8, 0]], [0, [3, -0.8, 0], [3, 0.64, 0]], [0.0164, [3, -0.64, -0.0164], [3, 0.733333, 0.0187916]], [0.2272, [3, -0.733333, -0.0385007], [3, 0.0533333, 0.00280005]], [0.23, [3, -0.0533333, 0], [3, 0.466667, 0]], [0.0196, [3, -0.466667, 0.00233333], [3, 0.72, -0.0036]], [0.016, [3, -0.72, 0], [3, 0.0266667, 0]], [0.0336, [3, -0.0266667, -0.00209923], [3, 1.12, 0.0881675]], [0.2868, [3, -1.12, -0.0264289], [3, 0.52, 0.0122705]], [0.299071, [3, -0.52, 0], [3, 0, 0]]])

        names.append("LHipPitch")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[-0.569072, [3, -1, 0], [3, 0.8, 0]], [-0.943368, [3, -0.8, 0.164479], [3, 0.64, -0.131583]], [-1.45726, [3, -0.64, 0], [3, 0.733333, 0]], [-1.45726, [3, -0.733333, 0], [3, 0.0533333, 0]], [-1.45726, [3, -0.0533333, 0], [3, 0.466667, 0]], [-1.15353, [3, -0.466667, -0.120048], [3, 0.72, 0.185218]], [-0.54146, [3, -0.72, 0], [3, 0.0266667, 0]], [-0.54146, [3, -0.0266667, 0], [3, 1.12, 0]], [-0.455556, [3, -1.12, -0.0165195], [3, 0.52, 0.00766977]], [-0.447886, [3, -0.52, 0], [3, 0, 0]]])

        names.append("LHipRoll")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[0.039926, [3, -1, 0], [3, 0.8, 0]], [-0.167164, [3, -0.8, 0.0553945], [3, 0.64, -0.0443156]], [-0.259204, [3, -0.64, 0.00401626], [3, 0.733333, -0.00460196]], [-0.263806, [3, -0.733333, 0], [3, 0.0533333, 0]], [-0.263806, [3, -0.0533333, 0], [3, 0.466667, 0]], [-0.197844, [3, -0.466667, -0.0277499], [3, 0.72, 0.0428141]], [-0.052114, [3, -0.72, 0], [3, 0.0266667, 0]], [-0.052114, [3, -0.0266667, 0], [3, 1.12, 0]], [0.0061779, [3, -1.12, 0], [3, 0.52, 0]], [0.00310993, [3, -0.52, 0], [3, 0, 0]]])

        names.append("LHipYawPitch")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[-0.612024, [3, -1, 0], [3, 0.8, 0]], [-0.993989, [3, -0.8, 0.0948807], [3, 0.64, -0.0759046]], [-1.12438, [3, -0.64, 0.0120488], [3, 0.733333, -0.013806]], [-1.13819, [3, -0.733333, 0], [3, 0.0533333, 0]], [-1.13819, [3, -0.0533333, 0], [3, 0.466667, 0]], [-1.13665, [3, -0.466667, -0.00153345], [3, 0.72, 0.00236589]], [-1.12591, [3, -0.72, 0], [3, 0.0266667, 0]], [-1.12591, [3, -0.0266667, 0], [3, 1.12, 0]], [-0.00609398, [3, -1.12, 0], [3, 0.52, 0]], [-0.00762796, [3, -0.52, 0], [3, 0, 0]]])

        names.append("LKneePitch")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[2.10461, [3, -1, 0], [3, 0.8, 0]], [2.03711, [3, -0.8, 0], [3, 0.64, 0]], [2.11255, [3, -0.64, 0], [3, 0.733333, 0]], [2.10921, [3, -0.733333, 0], [3, 0.0533333, 0]], [2.10921, [3, -0.0533333, 0], [3, 0.466667, 0]], [2.11255, [3, -0.466667, 0], [3, 0.72, 0]], [2.00029, [3, -0.72, 0], [3, 0.0266667, 0]], [2.00029, [3, -0.0266667, 0], [3, 1.12, 0]], [0.699462, [3, -1.12, 0], [3, 0.52, 0]], [0.70253, [3, -0.52, 0], [3, 0, 0]]])

        names.append("LShoulderPitch")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[1.42504, [3, -1, 0], [3, 0.8, 0]], [0.544529, [3, -0.8, 0], [3, 0.64, 0]], [0.54913, [3, -0.64, -0.00460121], [3, 0.733333, 0.00527222]], [0.605888, [3, -0.733333, 0], [3, 0.0533333, 0]], [0.605888, [3, -0.0533333, 0], [3, 0.466667, 0]], [0.470897, [3, -0.466667, 0.00298306], [3, 0.72, -0.00460244]], [0.466294, [3, -0.72, 0], [3, 0.0266667, 0]], [0.466294, [3, -0.0266667, 0], [3, 1.12, 0]], [1.55697, [3, -1.12, 0], [3, 0.52, 0]], [1.46334, [3, -0.52, 0], [3, 0, 0]]])

        names.append("LShoulderRoll")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[0.288349, [3, -1, 0], [3, 0.8, 0]], [-0.15651, [3, -0.8, 0], [3, 0.64, 0]], [-0.00771189, [3, -0.64, 0], [3, 0.733333, 0]], [-0.2869, [3, -0.733333, 0], [3, 0.0533333, 0]], [-0.250084, [3, -0.0533333, -0.00886312], [3, 0.466667, 0.0775523]], [-0.0276539, [3, -0.466667, 0], [3, 0.72, 0]], [-0.0506639, [3, -0.72, 0], [3, 0.0266667, 0]], [-0.0506639, [3, -0.0266667, 0], [3, 1.12, 0]], [0.283748, [3, -1.12, 0], [3, 0.52, 0]], [0.176053, [3, -0.52, 0], [3, 0, 0]]])

        names.append("LWristYaw")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[-0.00771189, [3, -1, 0], [3, 0.8, 0]], [-1.62301, [3, -0.8, 0], [3, 0.64, 0]], [-1.54018, [3, -0.64, 0], [3, 0.733333, 0]], [-1.65369, [3, -0.733333, 0], [3, 0.0533333, 0]], [-1.63835, [3, -0.0533333, 0], [3, 0.466667, 0]], [-1.79176, [3, -0.466667, 0], [3, 0.72, 0]], [-1.76107, [3, -0.72, 0], [3, 0.0266667, 0]], [-1.76107, [3, -0.0266667, 0], [3, 1.12, 0]], [-0.22554, [3, -1.12, -0.422851], [3, 0.52, 0.196324]], [0.0964535, [3, -0.52, 0], [3, 0, 0]]])

        names.append("RAnklePitch")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[-1.18421, [3, -1, 0], [3, 0.8, 0]], [-0.719404, [3, -0.8, -0.125561], [3, 0.64, 0.100449]], [-0.506178, [3, -0.64, 0], [3, 0.733333, 0]], [-0.515382, [3, -0.733333, 0], [3, 0.0533333, 0]], [-0.515382, [3, -0.0533333, 0], [3, 0.466667, 0]], [-0.615092, [3, -0.466667, 0.0412226], [3, 0.72, -0.0636006]], [-0.829852, [3, -0.72, 0], [3, 0.0266667, 0]], [-0.829852, [3, -0.0266667, 0], [3, 1.12, 0]], [-0.355846, [3, -1.12, 0], [3, 0.52, 0]], [-0.360449, [3, -0.52, 0], [3, 0, 0]]])

        names.append("RAnkleRoll")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[0.046062, [3, -1, 0], [3, 0.8, 0]], [0.0445281, [3, -0.8, 0.00153397], [3, 0.64, -0.00122717]], [-0.118076, [3, -0.64, 0.0026775], [3, 0.733333, -0.00306797]], [-0.121144, [3, -0.733333, 0], [3, 0.0533333, 0]], [-0.121144, [3, -0.0533333, 0], [3, 0.466667, 0]], [-0.161028, [3, -0.466667, 0.00663584], [3, 0.72, -0.0102382]], [-0.171766, [3, -0.72, 0], [3, 0.0266667, 0]], [-0.171766, [3, -0.0266667, 0], [3, 1.12, 0]], [0.0123138, [3, -1.12, 0], [3, 0.52, 0]], [0.00771189, [3, -0.52, 0], [3, 0, 0]]])

        names.append("RElbowRoll")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[0.0349066, [3, -1, 0], [3, 0.8, 0]], [0.297638, [3, -0.8, -0.083311], [3, 0.64, 0.0666488]], [0.484786, [3, -0.64, 0], [3, 0.733333, 0]], [0.19486, [3, -0.733333, 0], [3, 0.0533333, 0]], [0.19486, [3, -0.0533333, 0], [3, 0.466667, 0]], [0.200996, [3, -0.466667, -0.00361954], [3, 0.72, 0.00558443]], [0.222472, [3, -0.72, 0], [3, 0.0266667, 0]], [0.222472, [3, -0.0266667, 0], [3, 1.12, 0]], [0.04913, [3, -1.12, 0.0107405], [3, 0.52, -0.00498668]], [0.0441433, [3, -0.52, 0], [3, 0, 0]]])

        names.append("RElbowYaw")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[1.36522, [3, -1, 0], [3, 0.8, 0]], [0.469363, [3, -0.8, 0.0230109], [3, 0.64, -0.0184087]], [0.450954, [3, -0.64, 0.0184087], [3, 0.733333, -0.0210933]], [-0.0583339, [3, -0.733333, 0], [3, 0.0533333, 0]], [-0.0583339, [3, -0.0533333, 0], [3, 0.466667, 0]], [-0.0874801, [3, -0.466667, 0.00522824], [3, 0.72, -0.00806643]], [-0.0982179, [3, -0.72, 0], [3, 0.0266667, 0]], [-0.0982179, [3, -0.0266667, 0], [3, 1.12, 0]], [1.24863, [3, -1.12, 0], [3, 0.52, 0]], [1.18682, [3, -0.52, 0], [3, 0, 0]]])

        names.append("RHand")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[0.16, [3, -1, 0], [3, 0.8, 0]], [0.9668, [3, -0.8, 0], [3, 0.64, 0]], [0.954, [3, -0.64, 0.0128], [3, 0.733333, -0.0146666]], [0.5712, [3, -0.733333, 0.241503], [3, 0.0533333, -0.0175638]], [0.1768, [3, -0.0533333, 0.00192], [3, 0.466667, -0.0168]], [0.16, [3, -0.466667, 0.00613483], [3, 0.72, -0.00946517]], [0.13, [3, -0.72, 0], [3, 0.0266667, 0]], [0.17, [3, -0.0266667, -0.000542636], [3, 1.12, 0.0227907]], [0.2, [3, -1.12, -0.0113821], [3, 0.52, 0.00528455]], [0.21, [3, -0.52, 0], [3, 0, 0]]])

        names.append("RHipPitch")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[-0.589097, [3, -1, 0], [3, 0.8, 0]], [-1.24105, [3, -0.8, 0.0479379], [3, 0.64, -0.0383503]], [-1.2794, [3, -0.64, 0], [3, 0.733333, 0]], [-1.27786, [3, -0.733333, 0], [3, 0.0533333, 0]], [-1.27786, [3, -0.0533333, 0], [3, 0.466667, 0]], [-1.11373, [3, -0.466667, -0.0727932], [3, 0.72, 0.11231]], [-0.722556, [3, -0.72, 0], [3, 0.0266667, 0]], [-0.722556, [3, -0.0266667, 0], [3, 1.12, 0]], [-0.454106, [3, -1.12, -1.86421e-06], [3, 0.52, 8.65527e-07]], [-0.454105, [3, -0.52, 0], [3, 0, 0]]])

        names.append("RHipRoll")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[-0.240796, [3, -1, 0], [3, 0.8, 0]], [-0.0429101, [3, -0.8, -0.0906196], [3, 0.64, 0.0724957]], [0.24855, [3, -0.64, 0], [3, 0.733333, 0]], [0.24855, [3, -0.733333, 0], [3, 0.0533333, 0]], [0.24855, [3, -0.0533333, 0], [3, 0.466667, 0]], [0.14884, [3, -0.466667, 0.037402], [3, 0.72, -0.057706]], [-0.0367741, [3, -0.72, 0], [3, 0.0266667, 0]], [-0.0367741, [3, -0.0266667, 0], [3, 1.12, 0]], [-0.00916195, [3, -1.12, -0.00768249], [3, 0.52, 0.00356687]], [-0.00302602, [3, -0.52, 0], [3, 0, 0]]])

        names.append("RHipYawPitch")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[-0.612024, [3, -1, 0], [3, 0.8, 0]], [-0.993989, [3, -0.8, 0.0948807], [3, 0.64, -0.0759046]], [-1.12438, [3, -0.64, 0.0120488], [3, 0.733333, -0.013806]], [-1.13819, [3, -0.733333, 0], [3, 0.0533333, 0]], [-1.13819, [3, -0.0533333, 0], [3, 0.466667, 0]], [-1.13665, [3, -0.466667, -0.00153345], [3, 0.72, 0.00236589]], [-1.12591, [3, -0.72, 0], [3, 0.0266667, 0]], [-1.12591, [3, -0.0266667, 0], [3, 1.12, 0]], [-0.00609398, [3, -1.12, 0], [3, 0.52, 0]], [-0.00762796, [3, -0.52, 0], [3, 0, 0]]])

        names.append("RKneePitch")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[2.11255, [3, -1, 0], [3, 0.8, 0]], [2.10623, [3, -0.8, 0.00259118], [3, 0.64, -0.00207295]], [2.09855, [3, -0.64, 0], [3, 0.733333, 0]], [2.11236, [3, -0.733333, 0], [3, 0.0533333, 0]], [2.11236, [3, -0.0533333, 0], [3, 0.466667, 0]], [2.10316, [3, -0.466667, 0], [3, 0.72, 0]], [2.10316, [3, -0.72, 0], [3, 0.0266667, 0]], [2.10316, [3, -0.0266667, 0], [3, 1.12, 0]], [0.688808, [3, -1.12, 0], [3, 0.52, 0]], [0.690342, [3, -0.52, 0], [3, 0, 0]]])

        names.append("RShoulderPitch")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[1.42206, [3, -1, 0], [3, 0.8, 0]], [0.710284, [3, -0.8, 0], [3, 0.64, 0]], [0.721022, [3, -0.64, 0], [3, 0.733333, 0]], [0.590632, [3, -0.733333, 0], [3, 0.0533333, 0]], [0.590632, [3, -0.0533333, 0], [3, 0.466667, 0]], [0.526205, [3, -0.466667, 0], [3, 0.72, 0]], [0.544613, [3, -0.72, 0], [3, 0.0266667, 0]], [0.544613, [3, -0.0266667, 0], [3, 1.12, 0]], [1.03089, [3, -1.12, -0.248748], [3, 0.52, 0.11549]], [1.63733, [3, -0.52, 0], [3, 0, 0]]])

        names.append("RShoulderRoll")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[-0.276162, [3, -1, 0], [3, 0.8, 0]], [-0.128898, [3, -0.8, -0.0596555], [3, 0.64, 0.0477244]], [0.0459781, [3, -0.64, -0.0629089], [3, 0.733333, 0.0720831]], [0.276078, [3, -0.733333, 0], [3, 0.0533333, 0]], [0.276078, [3, -0.0533333, 0], [3, 0.466667, 0]], [0.185572, [3, -0.466667, 0], [3, 0.72, 0]], [0.210117, [3, -0.72, 0], [3, 0.0266667, 0]], [0.210117, [3, -0.0266667, 0], [3, 1.12, 0]], [-0.250084, [3, -1.12, 0.010661], [3, 0.52, -0.00494975]], [-0.255034, [3, -0.52, 0], [3, 0, 0]]])

        names.append("RWristYaw")
        times.append([3, 5.4, 7.32, 9.52, 9.68, 11.08, 13.24, 13.32, 16.68, 18.24])
        keys.append([[-0.0138481, [3, -1, 0], [3, 0.8, 0]], [1.33454, [3, -0.8, -0.011505], [3, 0.64, 0.00920402]], [1.34374, [3, -0.64, -0.00920402], [3, 0.733333, 0.0105463]], [1.72571, [3, -0.733333, 0], [3, 0.0533333, 0]], [1.72571, [3, -0.0533333, 0], [3, 0.466667, 0]], [1.73491, [3, -0.466667, -0.00542962], [3, 0.72, 0.00837713]], [1.76713, [3, -0.72, 0], [3, 0.0266667, 0]], [1.76713, [3, -0.0266667, 0], [3, 1.12, 0]], [0.133416, [3, -1.12, 0.0747885], [3, 0.52, -0.0347232]], [0.0986927, [3, -0.52, 0], [3, 0, 0]]])

        self.motion.angleInterpolationBezier(names, times, keys)

    def pickUpBall2(self):
        # https://github.com/esshuanshuana/NaoRobotPickRedBall/blob/master/naopickball.py
        names = list()
        times = list()
        keys = list()

        names.append("HeadPitch")
        times.append([2.56, 3.88, 6.36, 12.44, 14.2, 15.16, 16.4, 18.64])
        keys.append([[0.078192, [3, -0.866667, 0], [3, 0.44, 0]], [0.0199001, [3, -0.44, 0], [3, 0.826667, 0]], [0.0229681, [3, -0.826667, -0.00306797], [3, 2.02667, 0.00752147]], [0.0628521, [3, -2.02667, 0], [3, 0.586667, 0]], [0.0628521, [3, -0.586667, 0], [3, 0.32, 0]], [0.0413761, [3, -0.32, 0], [3, 0.413333, 0]], [0.078192, [3, -0.413333, 0], [3, 0.746667, 0]], [0.078192, [3, -0.746667, 0], [3, 0, 0]]])

        names.append("HeadYaw")
        times.append([2.56, 3.88, 6.36, 12.44, 14.2, 15.16, 16.4, 18.64])
        keys.append([[-0.023052, [3, -0.866667, 0], [3, 0.44, 0]], [0.108872, [3, -0.44, -0.045471], [3, 0.826667, 0.0854304]], [0.369652, [3, -0.826667, 0], [3, 2.02667, 0]], [0.0137641, [3, -2.02667, 0], [3, 0.586667, 0]], [0.0137641, [3, -0.586667, 0], [3, 0.32, 0]], [-0.0153821, [3, -0.32, 0.0023752], [3, 0.413333, -0.00306797]], [-0.01845, [3, -0.413333, 0], [3, 0.746667, 0]], [-0.01845, [3, -0.746667, 0], [3, 0, 0]]])

        names.append("LAnklePitch")
        times.append([2.56, 3.88, 6.36, 12.44, 14.2, 15.16, 16.4, 18.64])
        keys.append([[-1.22111, [3, -0.866667, 0], [3, 0.44, 0]], [-1.18508, [3, -0.44, 0], [3, 0.826667, 0]], [-1.18582, [3, -0.826667, 0.000505661], [3, 2.02667, -0.00123969]], [-1.19031, [3, -2.02667, 0.00449062], [3, 0.586667, -0.00129992]], [-1.22111, [3, -0.586667, 0], [3, 0.32, 0]], [-1.19031, [3, -0.32, 0], [3, 0.413333, 0]], [-1.22417, [3, -0.413333, 0], [3, 0.746667, 0]], [0.0820305, [3, -0.746667, 0], [3, 0, 0]]])

        names.append("LAnkleRoll")
        times.append([2.56, 3.88, 6.36, 12.44, 14.2, 15.16, 16.4, 18.64])
        keys.append([[0.0767419, [3, -0.866667, 0], [3, 0.44, 0]], [0.0785398, [3, -0.44, 0], [3, 0.826667, 0]], [0.0782759, [3, -0.826667, 0], [3, 2.02667, 0]], [0.0802851, [3, -2.02667, 0], [3, 0.586667, 0]], [0.0798099, [3, -0.586667, 0.000475241], [3, 0.32, -0.000259222]], [0.0715585, [3, -0.32, 0], [3, 0.413333, 0]], [0.0798099, [3, -0.413333, 0], [3, 0.746667, 0]], [-0.118682, [3, -0.746667, 0], [3, 0, 0]]])

        names.append("LElbowRoll")
        times.append([2.56, 3.88, 6.36, 12.44, 14.2, 15.16, 16.4, 18.64])
        keys.append([[-1.01393, [3, -0.866667, 0], [3, 0.44, 0]], [-1.05535, [3, -0.44, 0], [3, 0.826667, 0]], [-1.05075, [3, -0.826667, -0.00460194], [3, 2.02667, 0.0112822]], [-0.66148, [3, -2.02667, 0], [3, 0.586667, 0]], [-0.872804, [3, -0.586667, 0.0918522], [3, 0.32, -0.0501012]], [-1.08734, [3, -0.32, 0], [3, 0.413333, 0]], [-0.479966, [3, -0.413333, -0.00966164], [3, 0.746667, 0.0174533]], [-0.462512, [3, -0.746667, 0], [3, 0, 0]]])

        names.append("LElbowYaw")
        times.append([2.56, 3.88, 6.36, 12.44, 14.2, 15.16, 16.4, 18.64])
        keys.append([[-0.825334, [3, -0.866667, 0], [3, 0.44, 0]], [-0.820732, [3, -0.44, 0], [3, 0.826667, 0]], [-0.83147, [3, -0.826667, 0.0107381], [3, 2.02667, -0.0263257]], [-1.05767, [3, -2.02667, 0], [3, 0.586667, 0]], [-1.05697, [3, -0.586667, -0.000701277], [3, 0.32, 0.000382515]], [-0.937242, [3, -0.32, -0.0255385], [3, 0.413333, 0.0329872]], [-0.881391, [3, -0.413333, 0], [3, 0.746667, 0]], [-1.19206, [3, -0.746667, 0], [3, 0, 0]]])

        names.append("LHand")
        times.append([2.56, 3.88, 6.36, 12.44, 14.2, 15.16, 16.4, 18.64])
        keys.append([[0.02, [3, -0.866667, 0], [3, 0.44, 0]], [0.0268, [3, -0.44, 0], [3, 0.826667, 0]], [0.0176001, [3, -0.826667, 0], [3, 2.02667, 0]], [0.02, [3, -2.02667, 0], [3, 0.586667, 0]], [0.0176001, [3, -0.586667, 0], [3, 0.32, 0]], [0.03, [3, -0.32, 0], [3, 0.413333, 0]], [0.02, [3, -0.413333, 0], [3, 0.746667, 0]], [0.28, [3, -0.746667, 0], [3, 0, 0]]])

        names.append("LHipPitch")
        times.append([2.56, 3.88, 6.36, 12.44, 14.2, 15.16, 16.4, 18.64])
        keys.append([[-0.705598, [3, -0.866667, 0], [3, 0.44, 0]], [-0.703368, [3, -0.44, 0], [3, 0.826667, 0]], [-0.704064, [3, -0.826667, 0.000696417], [3, 2.02667, -0.00170734]], [-0.842994, [3, -2.02667, 0.0571024], [3, 0.586667, -0.0165296]], [-0.92496, [3, -0.586667, 0], [3, 0.32, 0]], [-0.790634, [3, -0.32, 0], [3, 0.413333, 0]], [-0.903484, [3, -0.413333, 0], [3, 0.746667, 0]], [0.1309, [3, -0.746667, 0], [3, 0, 0]]])

        names.append("LHipRoll")
        times.append([2.56, 3.88, 6.36, 12.44, 14.2, 15.16, 16.4, 18.64])
        keys.append([[-0.082794, [3, -0.866667, 0], [3, 0.44, 0]], [-0.0802851, [3, -0.44, -0.000297619], [3, 0.826667, 0.000559164]], [-0.079726, [3, -0.826667, -0.000168552], [3, 2.02667, 0.000413224]], [-0.0785398, [3, -2.02667, 0], [3, 0.586667, 0]], [-0.0919981, [3, -0.586667, 0], [3, 0.32, 0]], [-0.0820305, [3, -0.32, 0], [3, 0.413333, 0]], [-0.0950661, [3, -0.413333, 0], [3, 0.746667, 0]], [0.113446, [3, -0.746667, 0], [3, 0, 0]]])

        names.append("LHipYawPitch")
        times.append([2.56, 3.88, 6.36, 12.44, 14.2, 15.16, 16.4, 18.64])
        keys.append([[-0.248466, [3, -0.866667, 0], [3, 0.44, 0]], [-0.244346, [3, -0.44, -0.000256565], [3, 0.826667, 0.000482032]], [-0.243864, [3, -0.826667, 0], [3, 2.02667, 0]], [-0.251327, [3, -2.02667, 0.000713633], [3, 0.586667, -0.000206578]], [-0.251534, [3, -0.586667, 0.000206578], [3, 0.32, -0.000112679]], [-0.254818, [3, -0.32, 0], [3, 0.413333, 0]], [-0.223922, [3, -0.413333, -0.00829199], [3, 0.746667, 0.0149791]], [-0.185005, [3, -0.746667, 0], [3, 0, 0]]])

        names.append("LKneePitch")
        times.append([2.56, 3.88, 6.36, 12.44, 14.2, 15.16, 16.4, 18.64])
        keys.append([[2.14909, [3, -0.866667, 0], [3, 0.44, 0]], [2.11185, [3, -0.44, 0], [3, 0.826667, 0]], [2.11688, [3, -0.826667, 0], [3, 2.02667, 0]], [2.11185, [3, -2.02667, 0], [3, 0.586667, 0]], [2.15523, [3, -0.586667, 0], [3, 0.32, 0]], [2.11185, [3, -0.32, 0], [3, 0.413333, 0]], [2.15369, [3, -0.413333, 0], [3, 0.746667, 0]], [-0.0925025, [3, -0.746667, 0], [3, 0, 0]]])

        names.append("LShoulderPitch")
        times.append([2.56, 3.88, 6.36, 12.44, 14.2, 15.16, 16.4, 18.64])
        keys.append([[1.41124, [3, -0.866667, 0], [3, 0.44, 0]], [1.3913, [3, -0.44, 0.00163295], [3, 0.826667, -0.00306796]], [1.38823, [3, -0.826667, 0.00306796], [3, 2.02667, -0.00752145]], [1.09956, [3, -2.02667, 0], [3, 0.586667, 0]], [1.12591, [3, -0.586667, 0], [3, 0.32, 0]], [1.09258, [3, -0.32, 0.0210966], [3, 0.413333, -0.0272498]], [0.980875, [3, -0.413333, 0], [3, 0.746667, 0]], [1.494, [3, -0.746667, 0], [3, 0, 0]]])

        names.append("LShoulderRoll")
        times.append([2.56, 3.88, 6.36, 12.44, 14.2, 15.16, 16.4, 18.64])
        keys.append([[0.18097, [3, -0.866667, 0], [3, 0.44, 0]], [0.18864, [3, -0.44, 0], [3, 0.826667, 0]], [0.18864, [3, -0.826667, 0], [3, 2.02667, 0]], [-0.10821, [3, -2.02667, 0], [3, 0.586667, 0]], [0.00762796, [3, -0.586667, -0.063619], [3, 0.32, 0.0347013]], [0.18675, [3, -0.32, -0.069973], [3, 0.413333, 0.0903818]], [0.488692, [3, -0.413333, 0], [3, 0.746667, 0]], [0.191986, [3, -0.746667, 0], [3, 0, 0]]])

        names.append("LWristYaw")
        times.append([2.56, 3.88, 6.36, 12.44, 14.2, 15.16, 16.4, 18.64])
        keys.append([[0.115008, [3, -0.866667, 0], [3, 0.44, 0]], [0.125746, [3, -0.44, 0], [3, 0.826667, 0]], [0.125746, [3, -0.826667, 0], [3, 2.02667, 0]], [0.178024, [3, -2.02667, 0], [3, 0.586667, 0]], [0.052114, [3, -0.586667, 0], [3, 0.32, 0]], [0.141372, [3, -0.32, -0.0629946], [3, 0.413333, 0.081368]], [0.485202, [3, -0.413333, 0], [3, 0.746667, 0]], [0.129154, [3, -0.746667, 0], [3, 0, 0]]])

        names.append("RAnklePitch")
        times.append([2.56, 3.88, 6.36, 12.44, 14.2, 15.16, 16.4, 18.64])
        keys.append([[-1.21642, [3, -0.866667, 0], [3, 0.44, 0]], [-1.1796, [3, -0.44, -0.00244942], [3, 0.826667, 0.00460194]], [-1.175, [3, -0.826667, 0], [3, 2.02667, 0]], [-1.21642, [3, -2.02667, 0], [3, 0.586667, 0]], [-1.21642, [3, -0.586667, 0], [3, 0.32, 0]], [-1.18267, [3, -0.32, 0], [3, 0.413333, 0]], [-1.21949, [3, -0.413333, 0], [3, 0.746667, 0]], [0.0698132, [3, -0.746667, 0], [3, 0, 0]]])

        names.append("RAnkleRoll")
        times.append([2.56, 3.88, 6.36, 12.44, 14.2, 15.16, 16.4, 18.64])
        keys.append([[-0.075124, [3, -0.866667, 0], [3, 0.44, 0]], [-0.0858622, [3, -0.44, 0], [3, 0.826667, 0]], [-0.076658, [3, -0.826667, 0], [3, 2.02667, 0]], [-0.082794, [3, -2.02667, 0], [3, 0.586667, 0]], [-0.082794, [3, -0.586667, 0], [3, 0.32, 0]], [-0.079726, [3, -0.32, -0.00245438], [3, 0.413333, 0.00317024]], [-0.0659201, [3, -0.413333, -0.0138059], [3, 0.746667, 0.0249396]], [0.115192, [3, -0.746667, 0], [3, 0, 0]]])

        names.append("RElbowRoll")
        times.append([2.56, 3.88, 6.36, 12.44, 14.2, 15.16, 16.4, 18.64])
        keys.append([[0.39968, [3, -0.866667, 0], [3, 0.44, 0]], [0.703368, [3, -0.44, 0], [3, 0.826667, 0]], [0.656244, [3, -0.826667, 0.0384419], [3, 2.02667, -0.0942447]], [0.305308, [3, -2.02667, 0], [3, 0.586667, 0]], [0.502655, [3, -0.586667, -0.117101], [3, 0.32, 0.0638732]], [0.84823, [3, -0.32, -0.0741289], [3, 0.413333, 0.0957498]], [1.01229, [3, -0.413333, 0], [3, 0.746667, 0]], [0.479966, [3, -0.746667, 0], [3, 0, 0]]])

        names.append("RElbowYaw")
        times.append([2.56, 3.88, 6.36, 12.44, 14.2, 15.16, 16.4, 18.64])
        keys.append([[1.20602, [3, -0.866667, 0], [3, 0.44, 0]], [0.694641, [3, -0.44, 0], [3, 0.826667, 0]], [0.993092, [3, -0.826667, -0.049501], [3, 2.02667, 0.121357]], [1.20722, [3, -2.02667, 0], [3, 0.586667, 0]], [0.820305, [3, -0.586667, 0], [3, 0.32, 0]], [0.966912, [3, -0.32, -0.0266021], [3, 0.413333, 0.034361]], [1.00319, [3, -0.413333, -0.0362816], [3, 0.746667, 0.065541]], [1.29154, [3, -0.746667, 0], [3, 0, 0]]])

        names.append("RHand")
        times.append([2.56, 3.88, 6.36, 12.44, 14.2, 15.16, 16.4, 18.64])
        keys.append([[0.32, [3, -0.866667, 0], [3, 0.44, 0]], [0.02, [3, -0.44, 0], [3, 0.826667, 0]], [0.14, [3, -0.826667, -0.0946418], [3, 2.02667, 0.232025]], [1, [3, -2.02667, 0], [3, 0.586667, 0]], [0, [3, -0.586667, 0], [3, 0.32, 0]], [0.03, [3, -0.32, -0.03], [3, 0.413333, 0.03875]], [0.4, [3, -0.413333, 0], [3, 0.746667, 0]], [0, [3, -0.746667, 0], [3, 0, 0]]])

        names.append("RHipPitch")
        times.append([2.56, 3.88, 6.36, 12.44, 14.2, 15.16, 16.4, 18.64])
        keys.append([[-0.704148, [3, -0.866667, 0], [3, 0.44, 0]], [-0.698012, [3, -0.44, -0.00106574], [3, 0.826667, 0.00200231]], [-0.694944, [3, -0.826667, 0], [3, 2.02667, 0]], [-0.702614, [3, -2.02667, 0.00767017], [3, 0.586667, -0.00222031]], [-0.91584, [3, -0.586667, 0], [3, 0.32, 0]], [-0.694944, [3, -0.32, 0], [3, 0.413333, 0]], [-0.898966, [3, -0.413333, 0], [3, 0.746667, 0]], [0.143117, [3, -0.746667, 0], [3, 0, 0]]])

        names.append("RHipRoll")
        times.append([2.56, 3.88, 6.36, 12.44, 14.2, 15.16, 16.4, 18.64])
        keys.append([[0.0859461, [3, -0.866667, 0], [3, 0.44, 0]], [0.0798099, [3, -0.44, 0], [3, 0.826667, 0]], [0.0813439, [3, -0.826667, 0], [3, 2.02667, 0]], [0.0798099, [3, -2.02667, 0], [3, 0.586667, 0]], [0.090548, [3, -0.586667, 0], [3, 0.32, 0]], [0.0813439, [3, -0.32, 0.00178504], [3, 0.413333, -0.00230567]], [0.0782759, [3, -0.413333, 0.00306797], [3, 0.746667, -0.00554214]], [-0.116937, [3, -0.746667, 0], [3, 0, 0]]])

        names.append("RHipYawPitch")
        times.append([2.56, 3.88, 6.36, 12.44, 14.2, 15.16, 16.4, 18.64])
        keys.append([[-0.248466, [3, -0.866667, 0], [3, 0.44, 0]], [-0.244346, [3, -0.44, -0.000256565], [3, 0.826667, 0.000482032]], [-0.243864, [3, -0.826667, 0], [3, 2.02667, 0]], [-0.251327, [3, -2.02667, 0.000713633], [3, 0.586667, -0.000206578]], [-0.251534, [3, -0.586667, 0.000206578], [3, 0.32, -0.000112679]], [-0.254818, [3, -0.32, 0], [3, 0.413333, 0]], [-0.223922, [3, -0.413333, -0.00829199], [3, 0.746667, 0.0149791]], [-0.185005, [3, -0.746667, 0], [3, 0, 0]]])

        names.append("RKneePitch")
        times.append([2.56, 3.88, 6.36, 12.44, 14.2, 15.16, 16.4, 18.64])
        keys.append([[2.15224, [3, -0.866667, 0], [3, 0.44, 0]], [2.11389, [3, -0.44, 0], [3, 0.826667, 0]], [2.12156, [3, -0.826667, -0.00399988], [3, 2.02667, 0.00980617]], [2.15531, [3, -2.02667, 0], [3, 0.586667, 0]], [2.15531, [3, -0.586667, 0], [3, 0.32, 0]], [2.11083, [3, -0.32, 0], [3, 0.413333, 0]], [2.14918, [3, -0.413333, 0], [3, 0.746667, 0]], [-0.0925025, [3, -0.746667, 0], [3, 0, 0]]])

        names.append("RShoulderPitch")
        times.append([2.56, 3.88, 6.36, 12.44, 14.2, 15.16, 16.4, 18.64])
        keys.append([[1.51495, [3, -0.866667, 0], [3, 0.44, 0]], [1.34739, [3, -0.44, 0.00271577], [3, 0.826667, -0.00510235]], [1.34229, [3, -0.826667, 0.00510235], [3, 2.02667, -0.012509]], [0.817664, [3, -2.02667, 0], [3, 0.586667, 0]], [0.879646, [3, -0.586667, 0], [3, 0.32, 0]], [0.694641, [3, -0.32, 0], [3, 0.413333, 0]], [1.68773, [3, -0.413333, 0], [3, 0.746667, 0]], [1.49749, [3, -0.746667, 0], [3, 0, 0]]])

        names.append("RShoulderRoll")
        times.append([2.56, 3.88, 6.36, 12.44, 14.2, 15.16, 16.4, 18.64])
        keys.append([[-0.167552, [3, -0.866667, 0], [3, 0.44, 0]], [-0.684169, [3, -0.44, 0.0929618], [3, 0.826667, -0.174655]], [-0.970403, [3, -0.826667, 0], [3, 2.02667, 0]], [0.279253, [3, -2.02667, -0.120586], [3, 0.586667, 0.0349066]], [0.314159, [3, -0.586667, 0], [3, 0.32, 0]], [-0.434587, [3, -0.32, 0.150543], [3, 0.413333, -0.194451]], [-0.720821, [3, -0.413333, 0], [3, 0.746667, 0]], [-0.153589, [3, -0.746667, 0], [3, 0, 0]]])

        names.append("RWristYaw")
        times.append([2.56, 3.88, 6.36, 12.44, 14.2, 15.16, 16.4, 18.64])
        keys.append([[0.1309, [3, -0.866667, 0], [3, 0.44, 0]], [-0.127409, [3, -0.44, 0], [3, 0.826667, 0]], [0.139626, [3, -0.826667, -0.0348903], [3, 2.02667, 0.0855374]], [0.233874, [3, -2.02667, 0], [3, 0.586667, 0]], [-0.0488692, [3, -0.586667, 0.0741594], [3, 0.32, -0.0404506]], [-0.109956, [3, -0.32, 0.0250282], [3, 0.413333, -0.0323281]], [-0.220938, [3, -0.413333, 0], [3, 0.746667, 0]], [0.120428, [3, -0.746667, 0], [3, 0, 0]]])

        self.motion.angleInterpolationBezier(names, times, keys)]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
            </Box>
            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
            <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="3" />
          </Diagram>
        </BehaviorKeyframe>
      </BehaviorLayer>
    </Timeline>
  </Box>
</ChoregrapheProject>
